@page "/SAPshowcase/SapMovementsIN"
@attribute [Authorize]

@using System.Text.Json;
@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels;


@inject IJSRuntime _jsRuntime
@* @inject TooltipService tooltipService *@
@inject ISapMovementsINRepository _sapMovementsINRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository

@inject DialogService _dialogService

@if (IsAdmin == true)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">

        <div class="col-6">
            <h6 class="card-title text-primary"><a href="/SAPshowcase">Витрины SAP</a> - <a href="/SAPshowcase/SapMovementsIN">Движения - вход</a></h6>
        </div>


        @if (IsLoading != true)
        {

            <RadzenRow Gap="1rem" Class="rz-p-0 rz-p-lg-2">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenStack>
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenRadioButtonList @bind-Value=@applyRadioGroupValue TValue="int" Change="@(args => ChangeEndDate())">
                                    <Items>
                                        <RadzenRadioButtonListItem Text="По времени значения" Value="1" />
                                        <RadzenRadioButtonListItem Text="По времени добавления" Value="2" />
                                    </Items>
                                </RadzenRadioButtonList>
                                <RadzenDatePicker @bind-Value=@startDate Change="@(args => ChangeStartDate())" ShowTime="true" ShowSeconds="true" DateFormat="dd.MM.yyyy HH:mm:ss" />
                                <RadzenDatePicker @bind-Value=@endDate Change="@(args => ChangeEndDate())" Min=minEndDate Max=@maxEndDate ShowTime="true" ShowSeconds="true" DateFormat="dd.MM.yyyy HH:mm:ss" />
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="done" Disabled="@ApplyButtonDisabled" Text="Применить" Click="@(args => GetRows())" />
                                <RadzenButton title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" Text="--> в Excel" Icon="grid_on" Click="@(args => ExcelExport())" IsBusy=@excelExportFlag BusyText="Выполняется ..." />
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Добавить запись" Click="@(args => EditRow(null))" />
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>

            <RadzenDataGridApp @bind-Settings="@SapMovementsINGridSettings" @ref="sapMovementsINDTOGrid" AllowAlternatingRows="true" AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                               Data="@sapMovementsINDTOs" TItem="SapMovementsINDTO"
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               FilterMode="FilterMode.Advanced"
                               Density=Density.Compact
                               ShowPagingSummary="true"
                               EmptyText="Нет записей для отображения"
                               AllowVirtualization="true"
                               AllowColumnReorder="true"
                               AllowColumnResize="true"
                               Style=@(iconMenuActive ? "height:calc(100vh - 170px); width:1760px" : "height:calc(100vh - 170px); width:1600px")
                               ColumnWidth="200px"
                               AllowColumnPicking="true"
                               GridLines="DataGridGridLines.Both">
                <HeaderTemplate>
                    <RadzenButton Size="ButtonSize.Small" Text="Сбросить настройки интерфейса страницы" Click=@(() => CleanPageSettings())
                                  Icon="clear" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" />
                    <RadzenLabel Style="font-size: 10px; color:powderblue" Text="* Можно менять порядок колонок, ширину, скрывать/отображать колонки. Данные настройки страницы сохранятся в браузере" />
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="ErpId" Title="Ид записи" TextAlign="TextAlign.Center"
                                          FilterProperty="ErpId" FilterOperator="FilterOperator.Contains" SortProperty="ErpId">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @data1.ErpId
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="AddTime" Title="Время добавления" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                <strong>
                                    @data1.AddTime.ToString("dd.MM.yyyy HH:mm:ss.fff")
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="SapMaterialCode" Title="Код материала в SAP" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                <strong>
                                    @data1.SapMaterialCode
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="SapMaterialDTOFK.ToStringCodeName" Title="Материал в СИР" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            @if (data1.SapMaterialDTOFK != null)
                            {
                                <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                    <strong>
                                        @data1.SapMaterialDTOFK.ToStringCodeName
                                    </strong>
                                </div>
                            }
                            else
                            {
                                <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px; color: red">
                                    НЕ НАЙДЕН
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="ErpPlantIdSource" Title="Завод-источник SAP" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @data1.ErpPlantIdSource
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="ErpIdSource" Title="Ресурс-источник SAP" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @data1.ErpIdSource
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

@*                     <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="IsWarehouseSource" Title="Источник в SAP является складом" Filterable="true" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            @if (data.IsWarehouseSource != null)
                            {
                                <RadzenCheckBox @bind-Value=data.IsWarehouseSource ReadOnly="true" TriState="false" TValue="bool?" />
                            }
                        </Template>
                    </RadzenDataGridColumn>
 *@
                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="SapEquipmentSourceDTOFK.ToStringErpPlantIdErpIdName" Title="Источник в СИР" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            @if (data1.SapEquipmentSourceDTOFK != null)
                            {
                                <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                    @data1.SapEquipmentSourceDTOFK.ToStringErpPlantIdErpIdName
                                </div>
                            }
                            else
                            {
                                <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px; color: red">
                                    НЕ НАЙДЕН
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="SapEquipmentSourceDTOFK.IsWarehouse" Title="Источник в СИР является складом" Filterable="true" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            @if (data.SapEquipmentSourceDTOFK != null)
                            {
                                <RadzenCheckBox @bind-Value=data.SapEquipmentSourceDTOFK.IsWarehouse ReadOnly="true" TriState="false" TValue="bool" />
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="ErpPlantIdDest" Title="Завод-приёмник SAP" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @data1.ErpPlantIdDest
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="ErpIdDest" Title="Ресурс-приёмник SAP" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @data1.ErpIdDest
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

@*                     <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="IsWarehouseDest" Title="Приёмник в SAP является складом" Filterable="true" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.IsWarehouseDest ReadOnly="true" TriState="false" TValue="bool?" />
                        </Template>
                    </RadzenDataGridColumn> *@

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="SapEquipmentDestDTOFK.ToStringErpPlantIdErpIdName" Title="Приёмник в СИР" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            @if (data1.SapEquipmentDestDTOFK != null)
                            {
                                <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                    @data1.SapEquipmentDestDTOFK.ToStringErpPlantIdErpIdName
                                </div>
                            }
                            else
                            {
                                <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px; color: red">
                                    НЕ НАЙДЕН
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumn>


                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="SapEquipmentDestDTOFK.IsWarehouse" Title="Приёмник в СИР является складом" Filterable="true" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            @if (data.SapEquipmentDestDTOFK != null)
                            {
                                <RadzenCheckBox @bind-Value=data.SapEquipmentDestDTOFK.IsWarehouse ReadOnly="true" TriState="false" TValue="bool" />
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="SapDocumentEnterTime" Title="Время ввода док-та в SAP" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @data1.SapDocumentEnterTime.ToString("dd.MM.yyyy HH:mm:ss.fff")
                            </div>
                        </Template>
                    </RadzenDataGridColumn>


                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="SapDocumentPostTime" Title="Время значения" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                <strong>
                                    @data1.SapDocumentPostTime.ToString("dd.MM.yyyy HH:mm:ss.fff")
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="ToStringValue" Title="Значение" TextAlign="TextAlign.Center" Filterable="true" Sortable="true"
                                          FilterProperty="ToStringValue" SortProperty="Value" FilterOperator="FilterOperator.Contains">
                        <Template Context="data1">
                            <div style="white-space:pre-wrap; font-size: 12px">
                                <strong>
                                    @data1.ToStringValue
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="SapUnitOfMeasure" Title="Ед.изм.SAP" TextAlign="TextAlign.Center"
                                          FilterProperty="SapUnitOfMeasure" FilterOperator="FilterOperator.Contains" SortProperty="SapUnitOfMeasure">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @data1.SapUnitOfMeasure
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="MesGoneTime" Title="СИР забрал" TextAlign="TextAlign.Center"
                                          FilterProperty="MesGoneTime" FilterOperator="FilterOperator.Contains" SortProperty="MesGoneTime">
                        <Template Context="data1">
                            @if (data1.MesGoneTime != null)
                            {
                                <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">                                
                                    <strong>
                                        @(((DateTime)data1.MesGoneTime).ToString("dd.MM.yyyy HH:mm:ss.fff"))
                                    </strong>
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumn>


                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="MesError" Title="СИР ошибка" Filterable="true" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.MesError ReadOnly="true" TriState="false" TValue="bool?" />
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="MesErrorMessage" Title="СИР сообщение об ошибке" TextAlign="TextAlign.Center"
                                          FilterProperty="MesErrorMessage" FilterOperator="FilterOperator.Contains" SortProperty="MesErrorMessage">
                        <Template Context="data1">
                            @if (data1.MesErrorMessage != null)
                            {
                                <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                    @data1.MesErrorMessage
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumn>


                    @*                     <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="MesError" Title="СИР ошибка" Filterable="true" Width="25px" TextAlign="TextAlign.Center">
            <Template Context="data">
            @if (data.MesError == true)
            {
            <RadzenCheckBox @bind-Value=data.MesError ReadOnly="true" TriState="false" TValue="bool?"
            MouseEnter="@(args => ShowTooltip(args, new TooltipOptions(){ Position = TooltipPosition.Bottom }, data.MesErrorMessage))" />
            }
            else
            {
            <RadzenCheckBox @bind-Value=data.MesError ReadOnly="true" TriState="false" TValue="bool?" />
            }
            </Template>
            </RadzenDataGridColumn> *@

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="MesMovementDTOFK.MesParamDTOFK.Code" Title="Код тэга СИР" FilterProperty="MesMovementDTOFK.MesParamDTOFK.Code" SortProperty="MesMovementDTOFK.MesParamDTOFK.Code" TextAlign="TextAlign.Center" FilterOperator="FilterOperator.Contains">
                        <Template Context="data1">
                            @if (data1.MesMovementDTOFK != null)
                            {
                                @if (data1.MesMovementDTOFK.MesParamDTOFK != null)

                                {
                                    <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                        @(data1.MesMovementDTOFK.MesParamDTOFK.Code == null ? "" : data1.MesMovementDTOFK.MesParamDTOFK.Code)
                                    </div>
                                }
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="MesMovementDTOFK.MesParamDTOFK.Name" Title="Наим. тэга СИР" FilterProperty="MesMovementDTOFK.MesParamDTOFK.Name" SortProperty="MesMovementDTOFK.MesParamDTOFK.Name" TextAlign="TextAlign.Center" FilterOperator="FilterOperator.Contains">
                        <Template Context="data1">
                            @if (data1.MesMovementDTOFK != null)
                            {
                                @if (data1.MesMovementDTOFK.MesParamDTOFK != null)

                                {
                                    <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                        @(data1.MesMovementDTOFK.MesParamDTOFK.Name == null ? "" : data1.MesMovementDTOFK.MesParamDTOFK.Name)
                                    </div>
                                }
                            }
                        </Template>
                    </RadzenDataGridColumn>



                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="ToStringMesMovementId" Title="ИД в архиве данных" FilterProperty="ToStringMesMovementId" SortProperty="ToStringMesMovementId" TextAlign="TextAlign.Center" FilterOperator="FilterOperator.Contains">
                        <Template Context="data1">
                            @if (data1.ToStringMesMovementId != null)
                            {
                                <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                    @data1.ToStringMesMovementId
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumn>


                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="PreviousErpId" Title="ИД пред. записи" FilterProperty="PreviousErpId" SortProperty="PreviousErpId" TextAlign="TextAlign.Center" FilterOperator="FilterOperator.Contains">
                        <Template Context="data1">
                            @if (data1.PreviousErpId != null)
                            {
                                <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                    @data1.PreviousErpId
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="SapMovementsINDTO" Property="MoveType" Title="Тип" TextAlign="TextAlign.Center"
                                          FilterProperty="MoveType" FilterOperator="FilterOperator.Contains" SortProperty="MoveType">
                        <Template Context="data1">
                            @if (data1.MoveType != null)
                            {
                                <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                    @data1.MoveType
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Title="Действия" TItem="SapMovementsINDTO" Context="sapMovementsINDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right">
                        <Template Context="sapMovementsINDTO">
                            <RadzenButton title="Редактировать запись" Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(sapMovementsINDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton title="Удалить запись" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(sapMovementsINDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGridApp>
        }
        else
        {
            if (IsLoading)
            {
                //отображение gif загрузки
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>

            }
        }

    </div>
}

@code {
    [CascadingParameter]
    bool iconMenuActive { get; set; }

    _Dialogs? _dialogs { get; set; }

    IEnumerable<SapMovementsINDTO>? sapMovementsINDTOs;
      
    RadzenDataGrid<SapMovementsINDTO> sapMovementsINDTOGrid;

    DateTime startDate = DateTime.Today.AddDays(-7);
    DateTime endDate = DateTime.Today.AddDays(1).AddSeconds(-1);
    DateTime maxEndDate = DateTime.Today.AddDays(1).AddSeconds(-1);
    DateTime minEndDate = DateTime.Today.AddMonths(-1).AddDays(-1);

    bool excelExportFlag = false;

    int applyRadioGroupValue = 1;

    bool ApplyButtonDisabled = true;

    public bool IsLoading { get; set; }
    public bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsAdmin = true;
            if (firstRender)
            {
                applyRadioGroupValue = 1;
                ApplyButtonDisabled = false;

                startDate = DateTime.Today.AddDays(-7);
                endDate = DateTime.Today.AddDays(1).AddSeconds(-1);
                maxEndDate = DateTime.Today.AddDays(1).AddSeconds(-1);
                minEndDate = DateTime.Today.AddMonths(-1).AddDays(-1);

                IsLoading = true;
                await LoadStateAsync();
                StateHasChanged();

                await GetRows();

                IsLoading = false;
                StateHasChanged();
            }
        }
        else
            _navigationManager.NavigateTo("/SAPshowcase");
    }


    DataGridSettings _sapMovementsINGridSettings;
    public DataGridSettings SapMovementsINGridSettings
    {
        get
        {
            return _sapMovementsINGridSettings;
        }
        set
        {
            if (_sapMovementsINGridSettings != value)
            {
                _sapMovementsINGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "SapMovementsINGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _sapMovementsINGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }
    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('SapMovementsINGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(SapMovementsINGridSettings)}')");
    }

    private async Task ChangeStartDate()
    {
        ApplyButtonDisabled = false;
        maxEndDate = startDate.AddMonths(1).AddSeconds(-1);
        minEndDate = startDate.AddDays(-1);
        if (endDate > maxEndDate)
            endDate = maxEndDate;

    }

    private async Task ChangeEndDate()
    {
        ApplyButtonDisabled = false;
    }


    async Task GetRows()
    {
        IsLoading = true;
        await LoadStateAsync();
        StateHasChanged();
        if (applyRadioGroupValue == 1)
            sapMovementsINDTOs = await _sapMovementsINRepository.GetAllByTimeInterval(startDate, endDate, "VALUETIME");
        else
            sapMovementsINDTOs = await _sapMovementsINRepository.GetAllByTimeInterval(startDate, endDate, "ADDTIME");
        ApplyButtonDisabled = true;
        IsLoading = false;
        StateHasChanged();

    }


    async Task EditRow(SapMovementsINDTO? sapMovementsINDTO)
    {
        await _jsRuntime.ToastrSuccess("Не реализовано");
    }


    async Task DeleteRow(SapMovementsINDTO sapMovementsINDTO)
    {
        await _jsRuntime.ToastrSuccess("Не реализовано");
    }


    async Task ExcelExport()
    {
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);

        int viewCount = sapMovementsINDTOGrid.View.Count();

        // запас 100 строк на заголовки например
        if (viewCount > (SD.MaxAllowedExcelRows - 100))
        {
            await _jsRuntime.InvokeVoidAsync("ShowSwal", "warning", "В выборке " + viewCount.ToString()
                + " записей, что близко или превышает максимально доступное для Excel количество записей в "
                + SD.MaxAllowedExcelRows.ToString() + " строк." +
                "\n\n\n Установите фильтры или уменьшите интервал дат, чтобы количество выгружаемых строк не превышало этот предел.");
        }
        else
        {

            if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
            {
                string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
                string filename = "SapMovementsIN_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
                await _simpleExcelExportRepository.GenerateExcelSapMovementsIN(filename, (IEnumerable<SapMovementsINDTO>)sapMovementsINDTOGrid.View);

                await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
            }
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }

    @code {
        // void ShowTooltip(ElementReference elementReference, TooltipOptions options = null, string toolTipText = "") =>
        // tooltipService.Open(elementReference, toolTipText, options);

        private async Task CleanPageSettings()
        {

            await Task.CompletedTask;

            bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Сбросить настройки интерфейса страницы",
                    "Будут очищены пользовательские настройки страницы: видимость колонок, порядок следования колонок, ширина колонок, применённые фильтры", "Очистить?", "Отмена");
            if (selectionResult == false)
            {
                InvokeAsync(SaveStateAsync);
                return;
            }

            var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.removeItem", "SapMovementsINGridSettings");
            
            _sapMovementsINGridSettings = null;
            InvokeAsync(SaveStateAsync);
        }
    }

}

