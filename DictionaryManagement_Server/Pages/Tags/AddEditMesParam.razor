@page "/tags/MesParam/AddEditMesParam/{MesParamId}"

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Common;
@using DictionaryManagement_Models.IntDBModels

@inject IJSRuntime _jsRuntime

@inject IMesDepartmentRepository _mesParamRepository
@inject DialogService _dialogService

@*@inject NavigationManager _navigationManager*@


<div class="row my-2">
@* 

    <div class="col-md-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="ActiveMesDepartmentDTO" OnValidSubmit="AddEditMesDepartmentProcedure">
                <DataAnnotationsValidator />

                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12">
                        <RadzenStack>

                            @if(MesDepartmentId > 0)
                            {
                            <RadzenFormField Text="ИД записи" Variant="@variant" Style="width: 100%; max-width: 700px;">
                                <RadzenNumeric @bind-Value="@ActiveMesDepartmentDTO.Id" ReadOnly="true"/>
                            </RadzenFormField>
                            }

                            <RadzenFormField Text="Код производства" Variant="@variant" Style="width: 100%; max-width: 700px;">
                                <RadzenNumeric @bind-Value="@ActiveMesDepartmentDTO.MesCode" />
                            </RadzenFormField>
                            <ValidationMessage For="()=>ActiveMesDepartmentDTO.MesCode"></ValidationMessage>
                            <RadzenFormField Text="Наименование" Variant="@variant" Style="width: 100%; max-width: 700px;">
                                <RadzenTextBox @bind-Value="@ActiveMesDepartmentDTO.Name" />
                            </RadzenFormField>
                            <ValidationMessage For="()=>ActiveMesDepartmentDTO.Name"></ValidationMessage>
                            <RadzenFormField Text="Сокр. наименование" Variant="@variant" Style="width: 100%; max-width: 700px;">
                                <RadzenTextBox @bind-Value="@ActiveMesDepartmentDTO.ShortName" />
                            </RadzenFormField>
                            <ValidationMessage For="()=>ActiveMesDepartmentDTO.ShortName"></ValidationMessage>

                            <RadzenFormField Text="Родительское производство" Variant="@variant" Style="width: 100%; max-width: 700px;">
                                <RadzenDropDown @ref=@mesDepartmentDropDown FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.Contains" AllowFiltering="true"
                                                Data=@MesDepartmentDTOList TextProperty="ShortName" ValueProperty="Id" AllowClear="true" @bind-Value="ActiveMesDepartmentDTO.ParentDepartmentId" Style="width: 100%; max-width: 700px;" />
                            </RadzenFormField>
                            <ValidationMessage For="()=>ActiveMesDepartmentDTO.ParentDepartmentId"></ValidationMessage>


                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>

                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink @onclick="(() => OnClickCancel())" class="btn btn-secondary">Отмена</NavLink>
                </div>
            </EditForm>
        }
    </div>*@
</div>





@code {

    //[Parameter]
    //public int MesDepartmentId { get; set; }


    //Variant variant = Variant.Outlined;

    //public bool IsLoading { get; set; }

    //public MesDepartmentDTO ActiveMesDepartmentDTO { get; set; }

    //IEnumerable<MesDepartmentDTO> MesDepartmentDTOList { get; set; } = new List<MesDepartmentDTO>();

    //public IEnumerable<object> CheckedValues { get; set; } = new List<object>();

    //private string Title { get; set; } = "Создать производство";

    //RadzenDropDown<int?> mesDepartmentDropDown;


    //protected override async Task OnInitializedAsync()
    //{
    //    await base.OnInitializedAsync();

    //    IsLoading = true;
    //    StateHasChanged();

    //    if (MesDepartmentId <= 0)
    //    {
    //        ActiveMesDepartmentDTO = new MesDepartmentDTO();
    //    }
    //    else
    //    {
    //        ActiveMesDepartmentDTO = await _mesDepartmentRepository.GetById(MesDepartmentId);
    //        Title = "Изменить производство";
    //    }

    //    IsLoading = false;
    //    StateHasChanged();

    //    //employees = dbContext.Employees.Where(e => e.ReportsTo == null);
    //}

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {

    //        IsLoading = true;
    //        StateHasChanged();

    //        if (MesDepartmentId <= 0)
    //        {
    //            ActiveMesDepartmentDTO = new MesDepartmentDTO();
    //        }
    //        else
    //        {
    //            ActiveMesDepartmentDTO = await _mesDepartmentRepository.GetById(MesDepartmentId);
    //            Title = "Изменить производство";
    //        }
    //        MesDepartmentDTOList = await _mesDepartmentRepository.GetAll(SD.SelectDictionaryScope.NotArchiveOnly);

    //        IsLoading = false;
    //        StateHasChanged();
    //    }

    //    //base.OnAfterRender(firstRender);
    //}


    //private async Task ToastrSuccess(string messStr)
    //{
    //    await _jsRuntime.ToastrSuccess(messStr);
    //}

    //private async Task ToastrError(string messStr)
    //{
    //    await _jsRuntime.ToastrError(messStr);
    //}

    //private async Task AddEditMesDepartmentProcedure()
    //{

    //    if (MesDepartmentId<=0)
    //    { // создание
    //        var foundByCode = await _mesDepartmentRepository.GetByCode(ActiveMesDepartmentDTO.MesCode);
    //        if (foundByCode != null)
    //        {
    //            await _jsRuntime.ToastrError("Уже есть производcтво с кодом " + foundByCode.MesCode.ToString() + " (наименование: " + foundByCode.ShortName + " ИД: " + foundByCode.Id.ToString() + ")");
    //            return;
    //        }
    //        var foundByName = await _mesDepartmentRepository.GetByName(ActiveMesDepartmentDTO.Name);
    //        if (foundByName != null)
    //        {
    //            await _jsRuntime.ToastrError("Уже есть производcтво с наименованием " + foundByName.Name + " (Код: " + foundByName.MesCode.ToString() + " ИД: " + foundByName.Id.ToString() + ")");
    //            return;
    //        }

    //        var foundByShortName = await _mesDepartmentRepository.GetByName(ActiveMesDepartmentDTO.ShortName);
    //        if (foundByShortName != null)
    //        {
    //            await _jsRuntime.ToastrError("Уже есть производcтво с сокр. наименованием " + foundByShortName.ShortName + " (Код: " + foundByShortName.MesCode.ToString() + " ИД: " + foundByShortName.Id.ToString() + ")");
    //            return;
    //        }

    //        await _mesDepartmentRepository.Create(ActiveMesDepartmentDTO);

    //        await _jsRuntime.ToastrSuccess("Производство \"" + ActiveMesDepartmentDTO.ShortName + "\" создано");
    //        _dialogService.Close(ActiveMesDepartmentDTO);

    //    }
    //    else
    //    { // изменение производства
            
    //        var foundByCode = await _mesDepartmentRepository.GetByCode(ActiveMesDepartmentDTO.MesCode);
    //        if ((foundByCode != null) && (foundByCode.Id != ActiveMesDepartmentDTO.Id))
    //        {
    //            await _jsRuntime.ToastrError("Уже есть производcтво с кодом " + foundByCode.MesCode.ToString() + " (наименование: " + foundByCode.ShortName + " ИД: " + foundByCode.Id.ToString() + ")");
    //            return;
    //        }
    //        var foundByName = await _mesDepartmentRepository.GetByName(ActiveMesDepartmentDTO.Name);
    //        if ((foundByName != null) && (foundByName.Id != ActiveMesDepartmentDTO.Id))
    //        {
    //            await _jsRuntime.ToastrError("Уже есть производcтво с наименованием " + foundByName.Name + " (Код: " + foundByName.MesCode.ToString() + " ИД: " + foundByName.Id.ToString() + ")");
    //            return;
    //        }

    //        var foundByShortName = await _mesDepartmentRepository.GetByName(ActiveMesDepartmentDTO.ShortName);
    //        if ((foundByShortName != null) && (foundByShortName.Id != ActiveMesDepartmentDTO.Id))
    //        {
    //            await _jsRuntime.ToastrError("Уже есть производcтво с сокр. наименованием " + foundByShortName.ShortName + " (Код: " + foundByShortName.MesCode.ToString() + " ИД: " + foundByShortName.Id.ToString() + ")");
    //            return;
    //        }

    //        await _mesDepartmentRepository.Update(ActiveMesDepartmentDTO);
            
    //        await _jsRuntime.ToastrSuccess("Производство \"" + ActiveMesDepartmentDTO.ShortName + "\" изменено");

    //        _dialogService.Close(ActiveMesDepartmentDTO);


    //    }

    //}


    //private async Task OnClickCancel()
    //{
    //    _dialogService.Close(null);
    //}


}
