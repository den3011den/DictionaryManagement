@page "/tags/MesParam"


@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Common;
@using DictionaryManagement_DataAccess.Data.IntDB;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.EntityFrameworkCore;


@inject IJSRuntime _jsRuntime
@inject IMesParamRepository _mesParamRepository
@inject IMesParamSourceTypeRepository _mesParamSourceTypeRepository
@inject IMesDepartmentRepository _mesDepartmentRepository
@inject ISapEquipmentRepository _sapEquipmentRepository
@inject IMesMaterialRepository _mesMaterialRepository
@inject ISapMaterialRepository _sapMaterialRepository
@inject ISapUnitOfMeasureRepository _sapUnitOfMeasureRepository
@inject IMesUnitOfMeasureRepository _mesUnitOfMeasureRepository

@inject DialogService _dialogService



<_Dialogs @ref="_dialogs"></_Dialogs>



<div class="row mt-4">

    <div class="col-6">
        <h4 class="card-title text-primary"><a href="/tags">Тэги</a> - <a href="/tags/MesParam">Тэги СИР</a></h4>
        <div class="col-6">
            <RadzenCheckBox @bind-Value=@checkBoxValue TriState="true" TValue="bool?" Change=@OnArchiveCheckBoxChange Name="ArchiveCheckBox" />
            <RadzenLabel Text=@checkBoxText Component="ArchiveCheckBox" Style="margin-left: 8px; vertical-align: middle;" />
        </div>
    </div>


    @if (IsLoading != true)
    {

        @*<div style="word-wrap: normal">*@
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Добавить новый тэг СИР" Click="@(args => EditRow(null))" />
        <RadzenDataGrid @ref="mesParamDTOGrid" AllowAlternatingRows="false" AllowFiltering="true" PageSize="9"  AllowPaging="true" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                        Data="@mesParamDTOs" TItem="MesParamDTO"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        FilterMode="FilterMode.Simple"
                        AllowColumnResize="true"
                        Density=Density.Compact
                        ShowPagingSummary="true"
                        EmptyText = "Нет записей для отображения"
                        AllowVirtualization="true"
                        Style="word-wrap: normal">
            <Columns>
                <RadzenDataGridColumn TItem="MesParamDTO" Property="Id" Title="Ид записи" Width="35px">
@*                    <EditTemplate Context="data1">
                        <div class="rz-text-wrap">@data1.Id</div>
                    </EditTemplate>*@
                </RadzenDataGridColumn>
                
                <RadzenDataGridColumn TItem="MesParamDTO" Property="Code" Title="Код тэга СИР" Width="100px">                                   
 @*                  <EditTemplate Context="data1">
                         <RadzenText TextStyle="TextStyle.Body2">
                            <div class="rz-text-wrap">@data1.Code</div>
                         </RadzenText>
                        <div style="word-wrap: normal">@data1.Code</div>
                    </EditTemplate>*@
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="MesParamDTO" Property="Name" Title="Наименование" Width="100px">    
@*                    <EditTemplate Context="data1">      
                        <RadzenCard Style="white-space:pre-wrap">
                           <RadzenText TextStyle="TextStyle.Body2">
                            ${@data1.Name}
                         </RadzenText>
                        </RadzenCard>
                    </EditTemplate>*@
        
                </RadzenDataGridColumn>
        
                @*<RadzenDataGridColumn TItem="MesParamDTO" Property="Description" Title="Описание" Width="100px" />*@
                <RadzenDataGridColumn TItem="MesParamDTO" Property="MesParamSourceTypeDTOFK" Title="Источник" Width="80px" FilterProperty="MesParamSourceTypeDTOFK.ToStringValue" SortProperty="MesParamSourceTypeDTOFK.ToStringValue">
@*                    <EditTemplate Context="mesParamDTO">
                        <RadzenDropDown Data="@mesParamSourceTypeDTOs" @bind-Value="mesParamDTO.MesParamSourceTypeDTOFK" Style="width:100px; display: block; white-space:pre-wrap" />
                    </EditTemplate>*@
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="MesParamDTO" Property="MesParamSourceLink" Title="Тэг источника" Width="100px" />

@*                <RadzenDataGridColumn TItem="MesParamDTO" Property="MesDepartmentDTOFK" Title="Производство" Width="100px" FilterProperty="MesDepartmentDTOFK.ToStringValue">
                    <EditTemplate Context="mesParamDTO">
                        <RadzenDropDown Data="@mesDepartmentDTOs" @bind-Value="mesParamDTO.MesDepartmentDTOFK" Style="width:100px; display: block; white-space:pre-wrap" />
                    </EditTemplate>
                </RadzenDataGridColumn>*@

                <RadzenDataGridColumn TItem="MesParamDTO" Property="SapEquipmentSourceDTOFK" Title="SAP источник" Width="100px" FilterProperty="SapEquipmentSourceDTOFK.ToStringValue" SortProperty="SapEquipmentSourceDTOFK.ToStringValue">
@*                    <EditTemplate Context="mesParamDTO">
                        <RadzenDropDown Data="@sapEquipmentDTOs" @bind-Value="mesParamDTO.SapEquipmentSourceDTOFK" Style="width:100px; display: block; white-space:pre-wrap" />
                    </EditTemplate>*@
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="MesParamDTO" Property="SapEquipmentDestDTOFK" Title="SAP приемник" Width="100px" FilterProperty="SapEquipmentDestDTOFK.ToStringValue" SortProperty="SapEquipmentDestDTOFK.ToStringValue">
@*                    <EditTemplate Context="mesParamDTO">
                        <RadzenDropDown Data="@sapEquipmentDTOs" @bind-Value="mesParamDTO.SapEquipmentDestDTOFK" Style="width:100px; display: block; white-space:pre-wrap" />
                    </EditTemplate>*@
                </RadzenDataGridColumn>


                @if (SD.AppFactoryMode == SD.FactoryMode.NKNH)
                    {
                    <RadzenDataGridColumn TItem="MesParamDTO" Property="MesMaterialDTOFK" Title="Материал MES" Width="100px" FilterProperty="MesMaterialDTOFK.ToStringValue" SortProperty="MesMaterialDTOFK.ToStringValue">
@*                            <EditTemplate Context="mesParamDTO">
                                <RadzenDropDown Data="@mesDepartmentDTOs" @bind-Value="mesParamDTO.MesMaterialDTOFK" Style="width:100px; display: block;" />
                            </EditTemplate>*@
                        </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="MesParamDTO" Property="MesUnitOfMeasureDTOFK" Title="Ед.изм MES" Width="30px" FilterProperty="MesUnitOfMeasureDTOFK.ToStringValue" SortProperty="MesUnitOfMeasureDTOFK.ToStringValue">
@*                            <EditTemplate Context="mesParamDTO">
                            <RadzenDropDown Data="@mesDepartmentDTOs" @bind-Value="mesParamDTO.MesUnitOfMeasureDTOFK" Style="width:30px; display: block;" />
                            </EditTemplate>*@
                        </RadzenDataGridColumn>
                    }

                 @if (SD.AppFactoryMode == SD.FactoryMode.KOS)
                {

                    <RadzenDataGridColumn TItem="MesParamDTO" Property="SapMaterialDTOFK" Title="Материал SAP" Width="100px" FilterProperty="SapMaterialDTOFK.ToStringValue" SortProperty="SapMaterialDTOFK.ToStringValue">
@*                        <EditTemplate Context="mesParamDTO">
                            <RadzenDropDown Data="@mesDepartmentDTOs" @bind-Value="mesParamDTO.SapMaterialDTOFK" Style="width:100px; display: block;" />
                        </EditTemplate>*@
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="MesParamDTO" Property="SapUnitOfMeasureDTOFK" Title="Ед.изм SAP" Width="30px" FilterProperty="SapUnitOfMeasureDTOFK.ToStringValue" SortProperty="SapUnitOfMeasureDTOFK.ToStringValue">
@*                        <EditTemplate Context="mesParamDTO">
                            <RadzenDropDown Data="@mesDepartmentDTOs" @bind-Value="mesParamDTO.SapUnitOfMeasureDTOFK" Style="width:30px; display: block;" />
                        </EditTemplate>*@
                    </RadzenDataGridColumn>


                }

                <RadzenDataGridColumn TItem="MesParamDTO" Property="IsAtchive" Title="Арх" Filterable="false" Sortable="false" Width="20px">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.IsArchive ReadOnly="true" TriState="false" TValue="bool"/>
                        </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="MesParamDTO" Context="mesParamDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="47px">
                    <Template Context="mesParamDTO">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(mesParamDTO))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        @if (!mesParamDTO.IsArchive)
                        {
                            <RadzenButton Tooltip="Восстановить из архива" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mesParamDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        }
                        else
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="restore_from_trash" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mesParamDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        }
                    </Template>
                </RadzenDataGridColumn>                
            </Columns>
        </RadzenDataGrid>
     @*   </div>*@

    }
    else
    {
        if (IsLoading)
        {
            //отображение gif загрузки
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>

        }
    }

</div>


@code {

    _Dialogs? _dialogs { get; set; }

    public bool? checkBoxValue = null;
    public string checkBoxText = "Все записи";

    IEnumerable<MesParamDTO>? mesParamDTOs;

    //SD.AppFactoryMode = SD.FactoryMode.KOS;

    IEnumerable<MesParamSourceTypeDTO>? mesParamSourceTypeDTOs;
    //IEnumerable<MesDepartmentDTO>? mesDepartmentDTOs;
    //IEnumerable<SapEquipmentDTO>? sapEquipmentDTOs;
    //IEnumerable<MesMaterialDTO>? mesMaterialDTOs;
    //IEnumerable<SapMaterialDTO>? sapMaterialDTOs;
    //IEnumerable<SapUnitOfMeasureDTO>? sapUnitOfMeasureDTOs;
    //IEnumerable<MesUnitOfMeasureDTO>? mesUnitOfMeasureDTOs;

    //    if (SD.AppFactoryMode == SD.FactoryMode.KOS)
    //    {

    //    }


    RadzenDataGrid<MesParamDTO> mesParamDTOGrid;

    public bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //employees = dbContext.Employees.Where(e => e.ReportsTo == null);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            checkBoxValue = false;
            checkBoxText = "Все записи";

            IsLoading = true;
            StateHasChanged();
            mesParamDTOs = await _mesParamRepository.GetAll(SD.SelectDictionaryScope.All);

            //mesParamSourceTypeDTOs = await _mesParamSourceTypeRepository.GetAll(SD.SelectDictionaryScope.All);
            //mesDepartmentDTOs = await _mesDepartmentRepository.GetAll(SD.SelectDictionaryScope.All);
            //sapEquipmentDTOs = await _sapEquipmentRepository.GetAll(SD.SelectDictionaryScope.All);
            //if (SD.AppFactoryMode == SD.FactoryMode.NKNH)
            //{
            //    mesMaterialDTOs = await _mesMaterialRepository.GetAll(SD.SelectDictionaryScope.All);
            //    mesUnitOfMeasureDTOs = await _mesUnitOfMeasureRepository.GetAll(SD.SelectDictionaryScope.All);
            //}
            //if (SD.AppFactoryMode == SD.FactoryMode.KOS)
            //{
            //    sapMaterialDTOs = await _sapMaterialRepository.GetAll(SD.SelectDictionaryScope.All);
            //    sapUnitOfMeasureDTOs = await _sapUnitOfMeasureRepository.GetAll(SD.SelectDictionaryScope.All);
            //}

            IsLoading = false;
            StateHasChanged();
        }
    }

    async Task EditRow(MesParamDTO mesParamDTO)
    {
        //mesMaterialDTOToUpdate = mesMaterialDTO;
        //await mesMaterialDTOGrid.EditRow(mesMaterialDTO);

        IsLoading = true;

        MesParamDTO dialogResult;

        if (mesParamDTO == null)
        {
            IsLoading = false;
            this.StateHasChanged();
            dialogResult = await _dialogService.OpenAsync<AddEditMesParam>("Создать тэг СИР", new Dictionary<string, object>() { { "MesParamId", 0 } }, new DialogOptions() { Width = $"{1000}px" });
        }
        else
        {
            IsLoading = false;
            this.StateHasChanged();
            dialogResult = await _dialogService.OpenAsync<AddEditMesParam>("Изменить тэг СИР", new Dictionary<string, object>() { { "MesParamId", mesParamDTO.Id } }, new DialogOptions() { Width = $"{1000}px" });
        }


        if (dialogResult != null)
        {
            //var processResourcesVMDTOListTmp = processResourcesVMDTOList.ToList();
            //processResourcesVMDTOListTmp.Add(dialogResult);
            //processResourcesVMDTOList = processResourcesVMDTOListTmp.OrderBy(e => e.ProcessResources.InsideId).ThenBy(e => e.ProcessResources.ParentId);
            mesParamDTOs = await _mesParamRepository.GetAll(SD.SelectDictionaryScope.All);
            IsLoading = false;
            this.StateHasChanged();
        }

        //DialogService.Clo (dialogResult

        IsLoading = false;

        //InvokeAsync(StateHasChanged);

        //_navigationManager.NavigateTo("RPM/AddEquipmentToRecourse/" + parentId + "/" + insideId);


    }


    async Task DeleteRow(MesParamDTO mesParamDTO)
    {

        if (_dialogs != null)
        {
            if (mesParamDTO.IsArchive != true)
            {
                bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление тэга СИР", "Удалить тэг \"" + mesParamDTO.Code + "\" в архив ?", "Удалить", "Отмена");
                if (selectionResult == false)
                {
                    await _jsRuntime.ToastrSuccess("Отмена удаления");
                    return;
                }
            }
            else
            {
                bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Восстановление тэга СИР", "Восстановить тэг СИР \"" + mesParamDTO.Code + "\" из архива ?", "Восстановить", "Отмена");
                if (selectionResult == false)
                {
                    await _jsRuntime.ToastrSuccess("Отмена восстановления");
                    return;
                }
            }
        }



        //if (mesDepartmentDTOs.Contains(mesDepartmentDTO))
        //{
        if (mesParamDTO.IsArchive)
        {
            await _mesParamRepository.Delete(mesParamDTO.Id, SD.UpdateMode.RestoreFromArchive);
            mesParamDTO.IsArchive = false;
            await _jsRuntime.ToastrSuccess("Тэг СИР \"" + mesParamDTO.Name + "\" восстановлен из архива");
        }
        else
        {
            await _mesParamRepository.Delete(mesParamDTO.Id, SD.UpdateMode.MoveToArchive);
            mesParamDTO.IsArchive = true;
            await _jsRuntime.ToastrSuccess("Тэг СИР \"" + mesParamDTO.Name + "\" удалён в архив");
        }
        await mesParamDTOGrid.UpdateRow(mesParamDTO);
        //}
        //else
        //{
        //    mesParamDTOGrid.CancelEditRow(mesParamDTO);
        //    await mesParamDTOGrid.Reload();
        //}
    }

    void OnArchiveCheckBoxChange()
    {
        if (checkBoxValue == false)
        {
            checkBoxValue = null;
            checkBoxText = "Только архивные";

            IsLoading = true;
            //mesParamDTOs = Enumerable.Empty<MesParamDTO>();
            StateHasChanged();            
            mesParamDTOs = _mesParamRepository.GetAll(SD.SelectDictionaryScope.ArchiveOnly).Result;
            IsLoading = false;
            StateHasChanged();
            return;
        }
        if (checkBoxValue == null)
        {
            checkBoxValue = true;
            checkBoxText = "Только активные";

            IsLoading = true;
            //mesParamDTOs = Enumerable.Empty<MesParamDTO>();
            StateHasChanged();            
            mesParamDTOs = _mesParamRepository.GetAll(SD.SelectDictionaryScope.NotArchiveOnly).Result;
            IsLoading = false;
            StateHasChanged();
            return;

        }

        if (checkBoxValue == true)
        {
            checkBoxValue = false;
            checkBoxText = "Все записи";

            IsLoading = true;
            //mesParamDTOs = Enumerable.Empty<MesParamDTO>();
            StateHasChanged();
            mesParamDTOs = _mesParamRepository.GetAll(SD.SelectDictionaryScope.All).Result;
            IsLoading = false;
            StateHasChanged();
            return;
        }
    }


}