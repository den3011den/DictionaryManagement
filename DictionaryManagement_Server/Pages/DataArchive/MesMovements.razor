@page "/dataarchive/MesMovements"
@attribute [Authorize]

@using System.Text.Json;
@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels;
@using DictionaryManagement_Server.Extensions;

@inject IJSRuntime _jsRuntime
@inject IMesMovementsRepository _mesMovementsRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository

@inject DialogService _dialogService

@if (IsAdmin == true)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">

        <div class="col-6">
            <h6 class="card-title text-primary"><a href="/dataarchive">Архив данных</a> - <a href="/dataarchive/MesMovements">Архив данных</a></h6>
        </div>


        @if (IsLoading != true)
        {

            <RadzenRow Gap="1rem" Class="rz-p-0 rz-p-lg-2">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenStack>
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenRadioButtonList @bind-Value=@applyRadioGroupValue TValue="int" Change="@(args => ChangeEndDate())">
                                    <Items>
                                        <RadzenRadioButtonListItem Text="По времени значения" Value="1" />
                                        <RadzenRadioButtonListItem Text="По времени добавления" Value="2" />
                                    </Items>
                                </RadzenRadioButtonList>
                                <RadzenDatePicker @bind-Value=@startDate Change="@(args => ChangeStartDate())" ShowTime="true" ShowSeconds="true" DateFormat="dd.MM.yyyy HH:mm:ss" />
                                <RadzenDatePicker @bind-Value=@endDate Change="@(args => ChangeEndDate())" Min=minEndDate Max=@maxEndDate ShowTime="true" ShowSeconds="true" DateFormat="dd.MM.yyyy HH:mm:ss" />
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="done" Disabled="@ApplyButtonDisabled" Text="Применить" Click="@(args => GetRows())" />
                                <RadzenButton title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" Text="--> в Excel" Icon="grid_on" Click="@(args => ExcelExport())" IsBusy=@excelExportFlag BusyText="Выполняется ..." />
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="Добавить запись" Click="@(args => EditRow(null))" />
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>

            <RadzenDataGridApp @bind-Settings="@MesMovementsGridSettings" @ref="mesMovementsDTOGrid" AllowAlternatingRows="true" AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                               Data="@mesMovementsDTOs" TItem="MesMovementsDTO"
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               FilterMode="FilterMode.Simple"
                               Density=Density.Compact
                               ShowPagingSummary="true"
                               EmptyText="Нет записей для отображения"
                               AllowVirtualization="true"
                               Style="height:710px">
                <Columns>
                    <RadzenDataGridColumn TItem="MesMovementsDTO" Property="ToStringId" Title="Ид записи" Width="40px" TextAlign="TextAlign.Center"
                                          FilterProperty="ToStringId" FilterOperator="FilterOperator.Contains" SortProperty="Id">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                <strong>
                                    @data1.ToStringId
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="MesMovementsDTO" Property="AddTime" Title="Время добавления" Width="50px" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @data1.AddTime
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="MesMovementsDTO" Property="AddUserDTOFK.UserName" Title="Кто добавил" Width="50px"
                                          TextAlign="TextAlign.Center" Filterable="true" Sortable="true" FilterOperator="FilterOperator.Contains">
                        <Template Context="data1">
                            <div style="white-space:pre-wrap; font-size: 12px">
                                @data1.AddUserDTOFK.UserName
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="MesMovementsDTO" Property="DataSourceDTOFK.Name" Title="Источник" Width="50px"
                                          TextAlign="TextAlign.Center" Filterable="true" Sortable="true" FilterOperator="FilterOperator.Contains">
                        <Template Context="data1">
                            @if (data1.DataSourceDTOFK != null)
                            {
                                <div style="white-space:pre-wrap; font-size: 12px">
                                    @data1.DataSourceDTOFK.Name
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="MesMovementsDTO" Property="DataTypeDTOFK.Name" Title="Тип" Width="50px"
                                          TextAlign="TextAlign.Center" Filterable="true" Sortable="true" FilterOperator="FilterOperator.Contains">
                        <Template Context="data1">
                            @if (data1.DataTypeDTOFK != null)
                            {

                                <div style="white-space:pre-wrap; font-size: 12px">
                                    @data1.DataTypeDTOFK.Name
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="MesMovementsDTO" Property="MesParamDTOFK.Code" Title="Тэг (code + name)" Width="60px"
                                          TextAlign="TextAlign.Center" Filterable="true" Sortable="true" FilterOperator="FilterOperator.Contains">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @(data1.MesParamDTOFK.Code == null ? "" : data1.MesParamDTOFK.Code + " " + data1.MesParamDTOFK.Name == null ? "" : data1.MesParamDTOFK.Name)
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="MesMovementsDTO" Property="ValueTime" Title="Время значения" Width="60px" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                <strong>
                                    @data1.ValueTime
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="MesMovementsDTO" Property="ToStringValue" Title="Значение" Width="50px" TextAlign="TextAlign.Center" Filterable="true" Sortable="true"
                                          FilterProperty="ToStringValue" SortProperty="Value" FilterOperator="FilterOperator.Contains">
                        <Template Context="data1">
                            <div style="white-space:pre-wrap; font-size: 12px">
                                <strong>
                                    @data1.ToStringValue
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="MesMovementsDTO" Property="ReportEntityDTOFK.ToStringId" Title="ИД экземпляра отчёта" Width="40px" FilterProperty="ReportEntityDTOFK.ToStringId" SortProperty="ReportEntityDTOFK.ToStringId" TextAlign="TextAlign.Center" FilterOperator="FilterOperator.Contains">
                        <Template Context="data1">
                            @if (data1.ReportEntityDTOFK != null)
                            {
                                <div style="white-space:pre-wrap; font-size: 12px">
                                    @data1.ReportEntityDTOFK.ToStringId
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="MesMovementsDTO" Property="ToStringPreviousRecordId" Title="ИД пред. записи" Width="40px" FilterProperty="ToStringPreviousRecordId" SortProperty="ToStringPreviousRecordId" TextAlign="TextAlign.Center" FilterOperator="FilterOperator.Contains">
                        <Template Context="data1">
                            @if (data1.ToStringPreviousRecordId != null)
                            {
                                <div style="white-space:pre-wrap; font-size: 12px">
                                    @data1.ToStringPreviousRecordId
                                </div>
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="MesMovementsDTO" Property="MesGoneTime" Title="MES забрал" Width="40px" TextAlign="TextAlign.Center"
                                          FilterProperty="MesGoneTime" FilterOperator="FilterOperator.Contains" SortProperty="MesGoneTime">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                <strong>
                                    @data1.MesGoneTime
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>


                    <RadzenDataGridColumn TItem="MesMovementsDTO" Property="SapMovementsOUTDTOFK.SapGoneTime" Title="Sap забрал" Width="40px" TextAlign="TextAlign.Center"
                                          FilterProperty="SapMovementsOUTDTOFK.SapGoneTime" FilterOperator="FilterOperator.Contains" SortProperty="SapMovementsOUTDTOFK.SapGoneTime">
                        <Template Context="data1">
                            @if (data1.SapMovementOutId != null)
                            {
                                @if (data1.SapMovementsOUTDTOFK.SapGoneTime != null)
                                {
                                    <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                        <strong>
                                            @data1.SapMovementsOUTDTOFK.SapGoneTime
                                        </strong>
                                    </div>
                                }
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="MesMovementsDTO" Context="mesMovementsDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="36px">
                        <Template Context="mesMovementsDTO">
                            <RadzenButton title="Редактировать запись" Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(mesMovementsDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            <RadzenButton title="Удалить запись" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mesMovementsDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGridApp>
        }
        else
        {
            if (IsLoading)
            {
                //отображение gif загрузки
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>

            }
        }

    </div>
}

@code {

    _Dialogs? _dialogs { get; set; }

    IEnumerable<MesMovementsDTO>? mesMovementsDTOs;

    RadzenDataGrid<MesMovementsDTO> mesMovementsDTOGrid;

    DateTime startDate = DateTime.Today.AddDays(-7);
    DateTime endDate = DateTime.Today.AddDays(1).AddSeconds(-1);
    DateTime maxEndDate = DateTime.Today.AddDays(1).AddSeconds(-1);
    DateTime minEndDate = DateTime.Today.AddDays(-8);

    bool excelExportFlag = false;

    int applyRadioGroupValue = 1;

    bool ApplyButtonDisabled = true;

    public bool IsLoading { get; set; }
    public bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsAdmin = true;
            if (firstRender)
            {
                applyRadioGroupValue = 1;
                ApplyButtonDisabled = false;

                //await GetRows();

                startDate = DateTime.Today.AddDays(-7);
                endDate = DateTime.Today.AddDays(1).AddSeconds(-1);
                maxEndDate = DateTime.Today.AddDays(1).AddSeconds(-1);
                minEndDate = DateTime.Today.AddDays(-8);

                IsLoading = true;
                await LoadStateAsync();
                StateHasChanged();

                await GetRows();

                IsLoading = false;
                StateHasChanged();
            }
        }
        else
            _navigationManager.NavigateTo("/dataarchive");
    }


    DataGridSettings _mesMovementsGridSettings;
    public DataGridSettings MesMovementsGridSettings
    {
        get
        {
            return _mesMovementsGridSettings;
        }
        set
        {
            if (_mesMovementsGridSettings != value)
            {
                _mesMovementsGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "MesMovementsGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _mesMovementsGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('MesMovementsGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(MesMovementsGridSettings)}')");
    }


    private async Task ChangeStartDate()
    {
        ApplyButtonDisabled = false;
        maxEndDate = startDate.AddDays(7).AddSeconds(-1);
        minEndDate = startDate.AddDays(-1);
        if (endDate > maxEndDate)
            endDate = maxEndDate;

    }

    private async Task ChangeEndDate()
    {

        ApplyButtonDisabled = false;
    }


    async Task GetRows()
    {
        IsLoading = true;
        await LoadStateAsync();
        StateHasChanged();
        if (applyRadioGroupValue == 1)
            mesMovementsDTOs = await _mesMovementsRepository.GetAllByTimeInterval(startDate, endDate, "VALUETIME");
        else
            mesMovementsDTOs = await _mesMovementsRepository.GetAllByTimeInterval(startDate, endDate, "ADDTIME");
        ApplyButtonDisabled = true;
        IsLoading = false;
        StateHasChanged();

    }


    async Task EditRow(MesMovementsDTO? mesMovementsDTO)
    {
        await _jsRuntime.ToastrSuccess("Не реализовано");
    }


    async Task DeleteRow(MesMovementsDTO mesMovementsDTO)
    {
        await _jsRuntime.ToastrSuccess("Не реализовано");
    }


    async Task ExcelExport()
    {
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
        int viewCount = mesMovementsDTOGrid.View.Count();

        // запас 100 строк на заголовки например
        if (viewCount > (SD.MaxAllowedExcelRows - 100))
        {
            await _jsRuntime.InvokeVoidAsync("ShowSwal", "warning", "В выборке " + viewCount.ToString()
                + " записей, что близко или превышает максимально доступное для Excel количество записей в "
                + SD.MaxAllowedExcelRows.ToString() + " строк." +
                "\n\n\n Установите фильтры или уменьшите интервал дат, чтобы количество выгружаемых строк не превышало этот предел.");
        }
        else
        {

            if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
            {
                string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
                string filename = "MesMovements_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
                await _simpleExcelExportRepository.GenerateExcelMesMovements(filename, (IEnumerable<MesMovementsDTO>)mesMovementsDTOGrid.View);

                await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
            }
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);

    }
}

