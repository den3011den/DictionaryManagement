@page "/mapping/SapToMesMaterialMapping"


@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Common;
@using DictionaryManagement_DataAccess.Data.IntDB;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.EntityFrameworkCore;


@inject IJSRuntime _jsRuntime
@inject ISapToMesMaterialMappingRepository _sapToMesMaterialMappingRepository
@inject ISapMaterialRepository _sapMaterialRepository
@inject IMesMaterialRepository _mesMaterialRepository


<_Dialogs @ref="_dialogs"></_Dialogs>

<div class="row mt-4">

    <div class="col-6">
        <h4 class="card-title text-primary"><a href="/mapping">Маппинг</a> - <a href="/mapping/SapToMesMaterialMapping">Материалы</a></h4>
    </div>

    @if (IsLoading != true)
    {

        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Добавить новую связку материалов" Click="@InsertRow" Disabled=@(sapToMesMaterialMappingDTOToInsert != null || sapToMesMaterialMappingDTOToUpdate != null) />
        <RadzenDataGrid @ref="sapToMesMaterialMappingDTOGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                    Data="@sapToMesMaterialMappingDTOs" TItem="SapToMesMaterialMappingDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    FilterMode="FilterMode.Simple">
            <Columns>
                <RadzenDataGridColumn TItem="SapToMesMaterialMappingDTO" Property="SapMaterialDTO" FilterProperty="SapMaterialDTO.ToStringValue" Title="Материал SAP" Width="280px" Filterable="true">
                    <EditTemplate Context="sapToMesMaterialMappingDTO">
                        <RadzenDropDown Data="@sapMaterialDTOs" @bind-Value="sapToMesMaterialMappingDTO.SapMaterialDTO" Style="width:100%; display: block;" Name="SapMat" />
                        <RadzenRequiredValidator Text="Материал SAP обязателен к выбору" Component="SapMat" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="SapToMesMaterialMappingDTO" Property="MesMaterialDTO" Title="Материал MES" Width="280px" FilterProperty="MesMaterialDTO.ToStringValue" Filterable="true">
                    <EditTemplate Context="sapToMesMaterialMappingDTO">
                        <RadzenDropDown Data="@mesMaterialDTOs" @bind-Value="sapToMesMaterialMappingDTO.MesMaterialDTO" Style="width:100%; display: block;" Name="MesMat" />
                        <RadzenRequiredValidator Text="Материал MES обязателен к выбору" Component="MesMat" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="SapToMesMaterialMappingDTO" Context="SapToMesMaterialMappingDTO" Filterable="true" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                    <Template Context="SapToMesMaterialMappingDTO">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(SapToMesMaterialMappingDTO))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(SapToMesMaterialMappingDTO))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="SapToMesMaterialMappingDTO">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(SapToMesMaterialMappingDTO))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(SapToMesMaterialMappingDTO))">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(SapToMesMaterialMappingDTO))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    }
    else
    {
        if (IsLoading)
        {
            //отображение gif загрузки
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>

        }
    }

</div>

@code {

    _Dialogs? _dialogs { get; set; }

    RadzenDataGrid<SapToMesMaterialMappingDTO> sapToMesMaterialMappingDTOGrid;

    IEnumerable<SapToMesMaterialMappingDTO>? sapToMesMaterialMappingDTOs;
    IEnumerable<SapMaterialDTO> sapMaterialDTOs;
    IEnumerable<MesMaterialDTO> mesMaterialDTOs;

    SapToMesMaterialMappingDTO sapToMesMaterialMappingDTOToInsert;
    SapToMesMaterialMappingDTO sapToMesMaterialMappingDTOToUpdate;

    public bool IsLoading { get; set; }

    void Reset()
    {
        sapToMesMaterialMappingDTOToInsert = null;
        sapToMesMaterialMappingDTOToUpdate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            sapToMesMaterialMappingDTOs = _sapToMesMaterialMappingRepository.GetAll().Result;
            sapMaterialDTOs = _sapMaterialRepository.GetAll(SD.SelectDictionaryScope.NotArchiveOnly).Result;
            mesMaterialDTOs = _mesMaterialRepository.GetAll(SD.SelectDictionaryScope.NotArchiveOnly).Result;
            IsLoading = false;
            StateHasChanged();
        }
    }

    async Task EditRow(SapToMesMaterialMappingDTO sapToMesMaterialMappingDTO)
    {
        sapToMesMaterialMappingDTOToUpdate = sapToMesMaterialMappingDTO;
        await sapToMesMaterialMappingDTOGrid.EditRow(sapToMesMaterialMappingDTO);
    }

    async Task OnUpdateRow(SapToMesMaterialMappingDTO sapToMesMaterialMappingDTO)
    {

        if ((sapToMesMaterialMappingDTO.SapMaterialId != sapToMesMaterialMappingDTO.SapMaterialDTO.Id) || (sapToMesMaterialMappingDTO.MesMaterialId != sapToMesMaterialMappingDTO.MesMaterialDTO.Id))
        {
            var forCheck = _sapToMesMaterialMappingRepository.Get(sapToMesMaterialMappingDTO.SapMaterialDTO.Id, sapToMesMaterialMappingDTO.MesMaterialDTO.Id).Result;
            if (forCheck != null)
            {

                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Уже есть маппинг между материалом SAP \"" + sapToMesMaterialMappingDTO.SapMaterialDTO.ShortName
                    + "\" и материалом MES \"" + sapToMesMaterialMappingDTO.MesMaterialDTO.ShortName + "\"");

                sapToMesMaterialMappingDTOToUpdate.SapMaterialDTO = _sapMaterialRepository.Get(sapToMesMaterialMappingDTO.SapMaterialId).Result;
                sapToMesMaterialMappingDTOToUpdate.MesMaterialDTO = _mesMaterialRepository.Get(sapToMesMaterialMappingDTO.MesMaterialId).Result;
                await sapToMesMaterialMappingDTOGrid.UpdateRow(sapToMesMaterialMappingDTOToUpdate);
                sapToMesMaterialMappingDTOToUpdate = null;
                return;
            }
        }

        if (sapToMesMaterialMappingDTO == sapToMesMaterialMappingDTOToInsert)
        {
            sapToMesMaterialMappingDTOToInsert = null;
        }

        sapToMesMaterialMappingDTOToUpdate = null;

        sapToMesMaterialMappingDTO.SapMaterialId = sapToMesMaterialMappingDTO.SapMaterialDTO.Id;
        sapToMesMaterialMappingDTO.MesMaterialId = sapToMesMaterialMappingDTO.MesMaterialDTO.Id;
        await _sapToMesMaterialMappingRepository.Update(sapToMesMaterialMappingDTO);
    }

    async Task SaveRow(SapToMesMaterialMappingDTO sapToMesMaterialMappingDTO)
    {
        await sapToMesMaterialMappingDTOGrid.UpdateRow(sapToMesMaterialMappingDTO);
    }

    void CancelEdit(SapToMesMaterialMappingDTO sapToMesMaterialMappingDTO)
    {
        if (sapToMesMaterialMappingDTO == sapToMesMaterialMappingDTOToInsert)
        {
            sapToMesMaterialMappingDTOToInsert = null;
        }

        sapToMesMaterialMappingDTOToUpdate = null;

        sapToMesMaterialMappingDTOGrid.CancelEditRow(sapToMesMaterialMappingDTO);

    }

    async Task DeleteRow(SapToMesMaterialMappingDTO sapToMesMaterialMappingDTO)
    {

        if (_dialogs != null)
        {
            bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление маппинга материалов", "Удалить маппинг MES : \"" + sapToMesMaterialMappingDTO.SapMaterialDTO.ShortName +
                            "\" MES: \" " + sapToMesMaterialMappingDTO.MesMaterialDTO.ShortName + "\" ? ", "Удалить", "Отмена");
            if (selectionResult == false)
            {
                await _jsRuntime.ToastrSuccess("Отмена удаления");
                return;
            }
        }

        if (sapToMesMaterialMappingDTO == sapToMesMaterialMappingDTOToInsert)
        {
            sapToMesMaterialMappingDTOToInsert = null;
        }

        if (sapToMesMaterialMappingDTO == sapToMesMaterialMappingDTOToUpdate)
        {
            sapToMesMaterialMappingDTOToUpdate = null;
        }

        if (sapToMesMaterialMappingDTOs.Contains(sapToMesMaterialMappingDTO))
        {
            await _sapToMesMaterialMappingRepository.Delete(sapToMesMaterialMappingDTO.Id);

            sapToMesMaterialMappingDTOs = sapToMesMaterialMappingDTOs.Where(u => (u.Id != sapToMesMaterialMappingDTO.Id));

            await sapToMesMaterialMappingDTOGrid.Reload();
        }
        else
        {
            sapToMesMaterialMappingDTOGrid.CancelEditRow(sapToMesMaterialMappingDTO);
            await sapToMesMaterialMappingDTOGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        sapToMesMaterialMappingDTOToInsert = new SapToMesMaterialMappingDTO();
        await sapToMesMaterialMappingDTOGrid.InsertRow(sapToMesMaterialMappingDTOToInsert);
    }

    async Task OnCreateRow(SapToMesMaterialMappingDTO sapToMesMaterialMappingDTO)
    {

        var forCheck = _sapToMesMaterialMappingRepository.Get(sapToMesMaterialMappingDTO.SapMaterialDTO.Id, sapToMesMaterialMappingDTO.MesMaterialDTO.Id).Result;

        if (forCheck != null)
        {

            sapToMesMaterialMappingDTOToInsert = null;
            await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Уже есть маппинг материалов SAP: \"" + sapToMesMaterialMappingDTO.SapMaterialDTO.ShortName
                        + "\" и MES: " + sapToMesMaterialMappingDTO.MesMaterialDTO.ShortName);
            sapToMesMaterialMappingDTOGrid.CancelEditRow(sapToMesMaterialMappingDTO);
            await sapToMesMaterialMappingDTOGrid.Reload();
            return;
        }

        sapToMesMaterialMappingDTO.SapMaterialId = sapToMesMaterialMappingDTO.SapMaterialDTO.Id;
        sapToMesMaterialMappingDTO.MesMaterialId = sapToMesMaterialMappingDTO.MesMaterialDTO.Id;

        var newDTO = await _sapToMesMaterialMappingRepository.Create(sapToMesMaterialMappingDTO);


        sapToMesMaterialMappingDTOToInsert = null;
        await OnAfterRenderAsync(true);
    }


}
