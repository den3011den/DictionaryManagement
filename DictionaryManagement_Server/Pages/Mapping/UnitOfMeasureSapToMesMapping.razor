@page "/mapping/UnitOfMeasureSapToMesMapping"

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Common;
@using DictionaryManagement_DataAccess.Data.IntDB;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.EntityFrameworkCore;


@inject IJSRuntime _jsRuntime
@inject IUnitOfMeasureSapToMesMappingRepository _unitOfMeasureSapToMesMappingRepository
@inject ISapUnitOfMeasureRepository _sapUnitOfMeasureRepository
@inject IMesUnitOfMeasureRepository _mesUnitOfMeasureRepository

@*@inject NavigationManager _navigationManager*@


<_Dialogs @ref="_dialogs"></_Dialogs>

<div class="row mt-4">

    <div class="col-6">
        <h4 class="card-title text-primary"><a href="/mapping">Маппинг</a> - <a href="/mapping/UnitOfMeasureSapToMesMapping">Единицы измерения</a></h4>
    </div>


    @if (IsLoading != true)
    {

        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Добавить новую связку ед. изм." Click="@InsertRow" Disabled=@(unitOfMeasureSapToMesMappingDTOToInsert != null || unitOfMeasureSapToMesMappingDTOToUpdate != null) />
        <RadzenDataGrid @ref="unitOfMeasureSapToMesMappingDTOGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                    Data="@unitOfMeasureSapToMesMappingDTOs" TItem="UnitOfMeasureSapToMesMappingDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    FilterMode="FilterMode.Simple">
            <Columns>
                <RadzenDataGridColumn TItem="UnitOfMeasureSapToMesMappingDTO" Property="SapUnitOfMeasureDTO.ShortName" Title="Ед. изм. SAP" Width="280px">
                    <EditTemplate Context="sapUnitOfMeasureDTO">
                        <RadzenDropDown @bind-Value="sapUnitOfMeasureDTO.SapUnitId" Data="@sapUnitOfMeasureDTOs" TextProperty="ShortName" ValueProperty="Id" Style="width:100%; display: block;" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="UnitOfMeasureSapToMesMappingDTO" Property="MesUnitOfMeasureDTO.ShortName" Title="Ед. изм. MES" Width="280px">
                    <EditTemplate Context="mesUnitOfMeasureDTO">
                        <RadzenDropDown @bind-Value="mesUnitOfMeasureDTO.MesUnitId" Data="@mesUnitOfMeasureDTOs" TextProperty="ShortName" ValueProperty="Id" Style="width:100%; display: block;" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="UnitOfMeasureSapToMesMappingDTO" Property="SapToMesTransformKoef" Title="Коэф. пересчёта из SAP в MES">
                    <Template Context="unitOfMeasureSapToMesMappingDTO">
                        @String.Format(new System.Globalization.CultureInfo("en-US"), "{0}", unitOfMeasureSapToMesMappingDTO.SapToMesTransformKoef)
                    </Template>
                    <EditTemplate Context="unitOfMeasureSapToMesMappingDTO">
                        <RadzenNumeric @bind-Value="unitOfMeasureSapToMesMappingDTO.SapToMesTransformKoef" Style="width:100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="UnitOfMeasureSapToMesMappingDTO" Context="UnitOfMeasureSapToMesMappingDTO" Filterable="true" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                    <Template Context="UnitOfMeasureSapToMesMappingDTO">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(UnitOfMeasureSapToMesMappingDTO))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(UnitOfMeasureSapToMesMappingDTO))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="UnitOfMeasureSapToMesMappingDTO">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(UnitOfMeasureSapToMesMappingDTO))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(UnitOfMeasureSapToMesMappingDTO))">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(UnitOfMeasureSapToMesMappingDTO))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    }
    else
    {
        if (IsLoading)
        {
            //отображение gif загрузки
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>

        }
    }

</div>

@code {

    _Dialogs? _dialogs { get; set; }

    RadzenDataGrid<UnitOfMeasureSapToMesMappingDTO> unitOfMeasureSapToMesMappingDTOGrid;

    IEnumerable<UnitOfMeasureSapToMesMappingDTO> unitOfMeasureSapToMesMappingDTOs;
    IEnumerable<SapUnitOfMeasureDTO> sapUnitOfMeasureDTOs;
    IEnumerable<MesUnitOfMeasureDTO> mesUnitOfMeasureDTOs;

    UnitOfMeasureSapToMesMappingDTO unitOfMeasureSapToMesMappingDTOToInsert;
    UnitOfMeasureSapToMesMappingDTO unitOfMeasureSapToMesMappingDTOToUpdate;

    //int oldSapUnitIdBeforeUpdate, oldMesUnitIdBeforeUpdate;


    public bool IsLoading { get; set; }


    void Reset()
    {
        unitOfMeasureSapToMesMappingDTOToInsert = null;
        unitOfMeasureSapToMesMappingDTOToUpdate = null;
        //oldSapUnitIdBeforeUpdate = 0;
        //oldMesUnitIdBeforeUpdate = 0;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            unitOfMeasureSapToMesMappingDTOs = _unitOfMeasureSapToMesMappingRepository.GetAll().Result;
            sapUnitOfMeasureDTOs = _sapUnitOfMeasureRepository.GetAll(SD.SelectDictionaryScope.NotArchiveOnly).Result;
            mesUnitOfMeasureDTOs = _mesUnitOfMeasureRepository.GetAll(SD.SelectDictionaryScope.NotArchiveOnly).Result;
            IsLoading = false;
            StateHasChanged();
        }
    }

    async Task EditRow(UnitOfMeasureSapToMesMappingDTO unitOfMeasureSapToMesMappingDTO)
    {
        unitOfMeasureSapToMesMappingDTOToUpdate = unitOfMeasureSapToMesMappingDTO;
        //oldSapUnitIdBeforeUpdate = unitOfMeasureSapToMesMappingDTO.SapUnitId;
        //oldMesUnitIdBeforeUpdate = unitOfMeasureSapToMesMappingDTO.MesUnitId;

        await unitOfMeasureSapToMesMappingDTOGrid.EditRow(unitOfMeasureSapToMesMappingDTO);

    }

    async Task OnUpdateRow(UnitOfMeasureSapToMesMappingDTO unitOfMeasureSapToMesMappingDTO)
    {

        if ((unitOfMeasureSapToMesMappingDTO.SapUnitId != unitOfMeasureSapToMesMappingDTOToUpdate.SapUnitId) || (unitOfMeasureSapToMesMappingDTO.MesUnitId != unitOfMeasureSapToMesMappingDTOToUpdate.MesUnitId))
        {
            var forCheck = _unitOfMeasureSapToMesMappingRepository.Get(unitOfMeasureSapToMesMappingDTO.SapUnitId, unitOfMeasureSapToMesMappingDTO.MesUnitId).Result;
            if (forCheck!=null)
            {
                await unitOfMeasureSapToMesMappingDTOGrid.UpdateRow(unitOfMeasureSapToMesMappingDTOToUpdate);
                unitOfMeasureSapToMesMappingDTOToUpdate = null;
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Уже маппинг между ед. изм. SAP \"" + unitOfMeasureSapToMesMappingDTO.SapUnitOfMeasureDTO.ShortName 
                            + "\" и ед. изм. MES \"" + unitOfMeasureSapToMesMappingDTO.MesUnitOfMeasureDTO.ShortName + "\"");
                return;

            }
        }

        if (unitOfMeasureSapToMesMappingDTO == unitOfMeasureSapToMesMappingDTOToInsert)
        {
            unitOfMeasureSapToMesMappingDTOToInsert = null;
        }

        unitOfMeasureSapToMesMappingDTOToUpdate = null;

        await _unitOfMeasureSapToMesMappingRepository.Update(unitOfMeasureSapToMesMappingDTO);
    }

    async Task SaveRow(UnitOfMeasureSapToMesMappingDTO unitOfMeasureSapToMesMappingDTO)
    {
        await unitOfMeasureSapToMesMappingDTOGrid.UpdateRow(unitOfMeasureSapToMesMappingDTO);
    }

    void CancelEdit(UnitOfMeasureSapToMesMappingDTO unitOfMeasureSapToMesMappingDTO)
    {
        if (unitOfMeasureSapToMesMappingDTO == unitOfMeasureSapToMesMappingDTOToInsert)
        {
            unitOfMeasureSapToMesMappingDTOToInsert = null;
        }

        unitOfMeasureSapToMesMappingDTOToUpdate = null;

        unitOfMeasureSapToMesMappingDTOGrid.CancelEditRow(unitOfMeasureSapToMesMappingDTO);

    }

    async Task DeleteRow(UnitOfMeasureSapToMesMappingDTO unitOfMeasureSapToMesMappingDTO)
    {

        if (_dialogs != null)
        {
            bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление маппинга ед. изм.", "Удалить маппинг SAP : \"" + unitOfMeasureSapToMesMappingDTO.SapUnitOfMeasureDTO.ShortName +
                            "\" MES: \" " + unitOfMeasureSapToMesMappingDTO.MesUnitOfMeasureDTO.ShortName + "\" ? ", "Удалить", "Отмена");
            if (selectionResult == false)
            {
                await _jsRuntime.ToastrSuccess("Отмена удаления");
                return;
            }
        }

        if (unitOfMeasureSapToMesMappingDTO == unitOfMeasureSapToMesMappingDTOToInsert)
        {
            unitOfMeasureSapToMesMappingDTOToInsert = null;
        }

        if (unitOfMeasureSapToMesMappingDTO == unitOfMeasureSapToMesMappingDTOToUpdate)
        {
            unitOfMeasureSapToMesMappingDTOToUpdate = null;
        }

        if (unitOfMeasureSapToMesMappingDTOs.Contains(unitOfMeasureSapToMesMappingDTO))
        {
            await _unitOfMeasureSapToMesMappingRepository.Delete(unitOfMeasureSapToMesMappingDTO.SapUnitId, unitOfMeasureSapToMesMappingDTO.MesUnitId);

            unitOfMeasureSapToMesMappingDTOs = unitOfMeasureSapToMesMappingDTOs.Where(u => (!(u.SapUnitId == unitOfMeasureSapToMesMappingDTO.SapUnitId) && (u.MesUnitId == unitOfMeasureSapToMesMappingDTO.MesUnitId)));

            await unitOfMeasureSapToMesMappingDTOGrid.Reload();
        }
        else
        {
            unitOfMeasureSapToMesMappingDTOGrid.CancelEditRow(unitOfMeasureSapToMesMappingDTO);
            await unitOfMeasureSapToMesMappingDTOGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        unitOfMeasureSapToMesMappingDTOToInsert = new UnitOfMeasureSapToMesMappingDTO();
        await unitOfMeasureSapToMesMappingDTOGrid.InsertRow(unitOfMeasureSapToMesMappingDTOToInsert);
    }

    async Task OnCreateRow(UnitOfMeasureSapToMesMappingDTO unitOfMeasureSapToMesMappingDTO)
    {

        var forCheck = _unitOfMeasureSapToMesMappingRepository.Get(unitOfMeasureSapToMesMappingDTO.SapUnitId, unitOfMeasureSapToMesMappingDTO.MesUnitId).Result;

        if (forCheck.SapUnitId > 0)
        {

            unitOfMeasureSapToMesMappingDTOToInsert = null;
            await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Уже есть маппинг ед. изм. SAP: \"" + unitOfMeasureSapToMesMappingDTO.SapUnitOfMeasureDTO.ShortName 
                        + "\" и MES: " + unitOfMeasureSapToMesMappingDTO.MesUnitOfMeasureDTO.ShortName);
            unitOfMeasureSapToMesMappingDTOGrid.CancelEditRow(unitOfMeasureSapToMesMappingDTO);
            await unitOfMeasureSapToMesMappingDTOGrid.Reload();
            return;
        }

        var newDTO = await _unitOfMeasureSapToMesMappingRepository.Create(unitOfMeasureSapToMesMappingDTO);

        //settingsDTOToInsert.Id = newDTO.Id;
        //await settingsDTOGrid.UpdateRow(settingsDTOToInsert);

        unitOfMeasureSapToMesMappingDTOToInsert = null;
        await OnAfterRenderAsync(true);
    }


}