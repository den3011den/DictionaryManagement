@page "/reports/ReportEntity"
@attribute [Authorize]
@using System.Text.Json;
@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels;
@using DictionaryManagement_Server.Extensions;

@inject IJSRuntime _jsRuntime
@inject IReportEntityRepository _reportEntityRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository

@inject DialogService _dialogService

@if (IsAdmin == true)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">

        <div class="col-6">
            <h4 class="card-title text-primary"><a href="/reports">Отчёты</a> - <a href="/reports/ReportEntity">Журнал экземпляров отчётов</a></h4>
        </div>


        @if (IsLoading != true)
        {

            <RadzenRow Gap="1rem" Class="rz-p-0 rz-p-lg-4">
                <RadzenColumn Size="12" SizeMD="12">
                    <RadzenStack>
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
                                <RadzenRadioButtonList @bind-Value=@applyRadioGroupValue TValue="int" Change="@(args => ChangeEndDate())">
                                    <Items>
                                        <RadzenRadioButtonListItem Text="По дате скачивания из СИР" Value="1" />
                                        <RadzenRadioButtonListItem Text="По дате загрузки в СИР" Value="2" />
                                    </Items>
                                </RadzenRadioButtonList>
                                <RadzenDatePicker @bind-Value=@startDate Change="@(args => ChangeStartDate())" ShowTime="true" ShowSeconds="true" DateFormat="dd.MM.yyyy HH:mm:ss" />
                                <RadzenDatePicker @bind-Value=@endDate Change="@(args => ChangeEndDate())" Min=minEndDate Max=@maxEndDate ShowTime="true" ShowSeconds="true" DateFormat="dd.MM.yyyy HH:mm:ss" />
                                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="done" Disabled="@ApplyButtonDisabled" Text="Применить" Click="@(args => GetRows())" />
                                <RadzenButton title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" Text="Экспорт в Excel" Icon="grid_on" Click="@(args => ExcelExport())" IsBusy=@excelExportFlag BusyText="Выполняется ..." />
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>


            <RadzenDataGridApp @bind-Settings="@ReportEntityGridSettings" @ref="reportEntityDTOGrid" AllowAlternatingRows="true" AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                               Data="@reportEntityDTOs" TItem="ReportEntityDTO"
                               FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                               FilterMode="FilterMode.Advanced"
                               Density=Density.Compact
                               ShowPagingSummary="true"
                               EmptyText="Нет записей для отображения"
                               AllowVirtualization="true"
                               Style="height:720px">
                <Columns>
                    <RadzenDataGridColumn TItem="ReportEntityDTO" Property="ToStringId" Title="Ид экземпляра отчёта" Width="9%" TextAlign="TextAlign.Center"
                                          FilterProperty="ToStringId" FilterOperator="FilterOperator.Contains" SortProperty="ToStringId">
                        <Template Context="data1">
                            <div style="white-space:pre-wrap; font-size: 12px">
                                <strong>
                                    @data1.ToStringId
                                </strong>
                            </div>
                        </Template>

                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="ReportEntityDTO" Property="ReportDepartmentDTOFK" Title="Производство" Width="10%" FilterProperty="ReportDepartmentDTOFK.ToStringShortName" SortProperty="ReportDepartmentDTOFK.ToStringShortName">
                        <Template Context="data1">
                            <div style="white-space:pre-line; word-wrap: break-word; font-size: 12px">
                                @(data1.ReportDepartmentDTOFK == null ? "" : data1.ReportDepartmentDTOFK.ToStringShortName)
                            </div>
                        </Template>
                    </RadzenDataGridColumn>


                    <RadzenDataGridColumn TItem="ReportEntityDTO" Property="ReportTemplateDTOFK.Description" Title="Шаблон отчёта" Width="21%" FilterProperty="ReportTemplateDTOFK.Description" SortProperty="ReportTemplateDTOFK.Description" TextAlign="TextAlign.Center">
                        <Template Context="data1">
                            <div style="white-space:pre-wrap; font-size: 12px">
                                <strong>
                                    @data1.ReportTemplateDTOFK.Description
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="ReportEntityDTO" Title="Скачан из СИР" TextAlign="TextAlign.Center" Filterable="false" Sortable="false">
                        <Columns>
                            <RadzenDataGridColumn TItem="ReportEntityDTO" Property="DownloadTime" Title="Время" Width="100px" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="ReportEntityDTO" Property="DownloadUserDTOFK.UserName" Title="Кто" Width="100px"
                                                  TextAlign="TextAlign.Center" Filterable="true" Sortable="true"
                                                  FilterProperty="DownloadUserDTOFK.UserName" SortProperty="DownloadUserDTOFK.UserName">
                                <Template Context="data1">
                                    <div style="white-space:pre-wrap; font-size: 12px">
                                        @data1.DownloadUserDTOFK.UserName
                                    </div>
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="ReportEntityDTO" Property="DownloadSuccessFlag" Title="Файл" Width="100px" TextAlign="TextAlign.Center" Filterable="false" Sortable="false">
                                <Template Context="data">
                                    <RadzenButton title="Скачать файл" Icon="download" ButtonStyle="ButtonStyle.Light" Disabled="@(String.IsNullOrEmpty(data.DownloadReportFileName))" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DownloadReportEntityDownloadFile(data.Id))" @onclick:stopPropagation="true">
                                    </RadzenButton>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="ReportEntityDTO" Title="Загружен в СИР" TextAlign="TextAlign.Center" Filterable="false" Sortable="false">
                        <Columns>
                            <RadzenDataGridColumn TItem="ReportEntityDTO" Property="UploadTime" Title="Время" Width="100px" TextAlign="TextAlign.Center" Filterable="true" Sortable="true">
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="ReportEntityDTO" Property="UploadUserDTOFK.UserName" Title="Кто" Width="100px" TextAlign="TextAlign.Center" Filterable="true" Sortable="true"
                                                  FilterProperty="data1.UploadUserDTOFK.UserName" SortProperty="data1.UploadUserDTOFK.UserName">
                                <Template Context="data1">
                                    @if (data1.UploadUserDTOFK != null)
                                    {
                                        <div style="white-space:pre-wrap; font-size: 12px">
                                            @(data1.UploadUserDTOFK == null ? "" : data1.UploadUserDTOFK.UserName)
                                        </div>
                                    }
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn TItem="ReportEntityDTO" Property="UploadSuccessFlag" Title="Файл" Filterable="false" Sortable="false" Width="100px" TextAlign="TextAlign.Center">
                                <Template Context="data">
                                    <RadzenButton title="Скачать файл" Icon="download" ButtonStyle="ButtonStyle.Light" Disabled="@(String.IsNullOrEmpty(data.UploadReportFileName))" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DownloadReportEntityUploadFile(data.Id))" @onclick:stopPropagation="true">
                                    </RadzenButton>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="ReportEntityDTO" Context="reportEntityDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                        <Template Context="reportEntityDTO">
                            <RadzenButton title="Детали" ButtonStyle="ButtonStyle.Info" Icon="info" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => ShowReportEntityDetails(reportEntityDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGridApp>
        }
        else
        {
            if (IsLoading)
            {
                //отображение gif загрузки
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>

            }
        }

    </div>
}

@code {

    _Dialogs? _dialogs { get; set; }

    IEnumerable<ReportEntityDTO>? reportEntityDTOs;

    RadzenDataGrid<ReportEntityDTO> reportEntityDTOGrid;    
    DateTime startDate = DateTime.Today.AddMonths(-1);
    DateTime endDate = DateTime.Today.AddDays(1).AddSeconds(-1);
    DateTime maxEndDate = DateTime.Today.AddDays(1).AddSeconds(-1);
    DateTime minEndDate = DateTime.Today.AddMonths(-1).AddDays(-1);

    bool excelExportFlag = false;

    int applyRadioGroupValue = 1;

    bool ApplyButtonDisabled = true;

    public bool IsLoading { get; set; }
    public bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsAdmin = true;
            if (firstRender)
            {
                applyRadioGroupValue = 1;
                ApplyButtonDisabled = false;

                //await GetRows();

                startDate = DateTime.Today.AddMonths(-1);
                endDate = DateTime.Today.AddDays(1).AddSeconds(-1);
                maxEndDate = DateTime.Today.AddDays(1).AddSeconds(-1);
                minEndDate = DateTime.Today.AddMonths(-1).AddDays(-1);

                IsLoading = true;
                await LoadStateAsync();
                StateHasChanged();
                await GetRows();
                //reportEntityDTOs = await _reportEntityRepository.GetAllByDownloadTimeInterval(startDate, endDate);

                IsLoading = false;
                StateHasChanged();
            }
        }
        else
            _navigationManager.NavigateTo("/reports");
    }


    DataGridSettings _reportEntityGridSettings;
    public DataGridSettings ReportEntityGridSettings
    {
        get
        {
            return _reportEntityGridSettings;
        }
        set
        {
            if (_reportEntityGridSettings != value)
            {
                _reportEntityGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "ReportEntityGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _reportEntityGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('ReportEntityGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(ReportEntityGridSettings)}')");
    }

    async Task DownloadReportEntityDownloadFile(Guid id)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            //_navigationManager.NavigateTo("/DownloadFileController/DownloadReportTemplateFile/" + id.ToString());
            await _jsRuntime.InvokeVoidAsync("open", "/DownloadFileController/DownloadReportEntityDownloadFile/" + id.ToString(), "_blank");
        }
    }

    async Task DownloadReportEntityUploadFile(Guid id)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            //_navigationManager.NavigateTo("/DownloadFileController/DownloadReportTemplateFile/" + id.ToString());
            await _jsRuntime.InvokeVoidAsync("open", "/DownloadFileController/DownloadReportEntityUploadFile/" + id.ToString(), "_blank");
        }
    }

    private async Task ChangeStartDate()
    {
        ApplyButtonDisabled = false;
        maxEndDate = startDate.AddMonths(1).AddSeconds(-1);
        minEndDate = startDate.AddDays(-1);
        if (endDate > maxEndDate)
            endDate = maxEndDate;

    }

    private async Task ChangeEndDate()
    {

        ApplyButtonDisabled = false;
    }


    async Task GetRows()
    {
        IsLoading = true;
        await LoadStateAsync();
        StateHasChanged();
        if (applyRadioGroupValue == 1)
            reportEntityDTOs = await _reportEntityRepository.GetAllByDownloadTimeInterval(startDate, endDate);
        else
            reportEntityDTOs = await _reportEntityRepository.GetAllByUploadTimeInterval(startDate, endDate);
        ApplyButtonDisabled = true;
        IsLoading = false;
        StateHasChanged();

    }



    async Task ShowReportEntityDetails(ReportEntityDTO reportEntityDTO)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsLoading = true;

            ReportEntityDTO dialogResult = null;

            if (reportEntityDTO == null)
            {
                await _jsRuntime.ToastrError("Пустой объект для отображения деталей записи");
                IsLoading = false;
                return;
            }
            else
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<ReportEntityDetails>("Подробно по экземпляру отчёта ", new Dictionary<string, object>() { { "ReportEntityId", reportEntityDTO.Id } }, new DialogOptions() { Width = $"{1100}px" });
            }

            IsLoading = false;
        }
    }
    async Task ExcelExport()
    {
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
            string filename = "ReportEntity_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
            await _simpleExcelExportRepository.GenerateExcelReportEntity(filename, (IEnumerable<ReportEntityDTO>)reportEntityDTOGrid.View);

            await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }
}
