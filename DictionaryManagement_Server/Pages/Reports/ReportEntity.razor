@page "/reports/ReportEntity"
@using System.Text.Json;
@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels;

<h3>Отчёты - Журнал экземпляров отчётов</h3>


@inject IJSRuntime _jsRuntime
@inject IReportEntityRepository _reportEntityRepository

@inject DialogService _dialogService

@inject NavigationManager _navigationManager



<_Dialogs @ref="_dialogs"></_Dialogs>



<div class="row mt-4">

    <div class="col-6">
        <h4 class="card-title text-primary"><a href="/reports">Отчёты</a> - <a href="/reports/ReportEntity">Журнал экземпляров отчётов</a></h4>
    </div>


    @if (IsLoading != true)
    {

        @*<div style="word-wrap: normal">*@
@*        <RadzenDatePicker @bind-Value=@startDate />
        <RadzenDatePicker @bind-Value=@endDate />*@


        <RadzenRow Gap="1rem" Class="rz-p-0 rz-p-lg-4">
            <RadzenColumn Size="12" SizeMD="12">
                <RadzenStack>
                    @*<RadzenFieldset Text="Начало интревала">*@
                        <RadzenStack Gap="1rem">
                            <RadzenRow AlignItems="AlignItems.Center">
@*                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Text="Credit Card" />
                                </RadzenColumn>
*@                               @* <RadzenColumn Size="12" SizeMD="8">*@

                            <RadzenRadioButtonList @bind-Value=@applyRadioGroupValue TValue="int" Change="@(args => ChangeEndDate())">
                                <Items>
                                    <RadzenRadioButtonListItem Text="По дате скачивания из СИР" Value="1" />
                                    <RadzenRadioButtonListItem Text="По дате загрузки в СИР" Value="2" />
                                </Items>
                            </RadzenRadioButtonList>
                            <RadzenDatePicker @bind-Value=@startDate Change="@(args => ChangeStartDate())" ShowTime="true" ShowSeconds="true" DateFormat="dd.MM.yyyy HH:mm:ss" />
                             @*   </RadzenColumn>*@
                               @* <RadzenColumn Size="12" SizeMD="8">     *@
                            <RadzenDatePicker @bind-Value=@endDate Change="@(args => ChangeEndDate())" Min=minEndDate Max=@maxEndDate ShowTime="true" ShowSeconds="true" DateFormat="dd.MM.yyyy HH:mm:ss" />
                               @* </RadzenColumn>*@
                               @* <RadzenColumn Size="12" SizeMD="8">*@
                                    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="done" Disabled = "@ApplyButtonDisabled" Text="Применить" Click="@(args => GetRows())" />
                                @*</RadzenColumn>*@
                            </RadzenRow>
                        </RadzenStack>
                    @*</RadzenFieldset>*@
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>





        
        <RadzenDataGrid @bind-Settings="@ReportEntityGridSettings" @ref="reportEntityDTOGrid" AllowAlternatingRows="true" AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                        Data="@reportEntityDTOs" TItem="ReportEntityDTO"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        FilterMode="FilterMode.Simple"
                        Density=Density.Compact
                        ShowPagingSummary="true"
                        EmptyText="Нет записей для отображения"
                        AllowVirtualization="true"
                        Style="height:700px">
            <Columns>
                <RadzenDataGridColumn TItem="ReportEntityDTO" Property="ToStringId" Title="Ид экземпляра отчёта" Width="19%" TextAlign="TextAlign.Center"
                                      FilterProperty="ToStringId" FilterOperator="FilterOperator.Contains" SortProperty="ToStringId">
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="ReportEntityDTO" Property="ReportTemplateDTOFK.Description" Title="Шаблон отчёта" Width="21%" FilterProperty="ReportTemplateDTOFK.Description" SortProperty="ReportTemplateDTOFK.Description" TextAlign="TextAlign.Center">
                    <Template Context="data1">
                        <RadzenCard Style="white-space:pre-wrap">
                            <RadzenText TextStyle="TextStyle.Body2">
                                <strong>
                                    @data1.ReportTemplateDTOFK.Description
                                </strong>
                            </RadzenText>
                        </RadzenCard>
                    </Template>
                </RadzenDataGridColumn>

@*                <RadzenDataGridColumn TItem="ReportEntityDTO" Title="Интревал дат отчёта" Sortable="false" Filterable="false" TextAlign="TextAlign.Center">
                    <Columns>
                        <RadzenDataGridColumn TItem="ReportEntityDTO" Property="ReportTimeStart" Title="Начало" Width="6%" Sortable="true" Filterable="true" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ReportEntityDTO" Property="ReportTimeEnd" Title="Конец" Width="6%" Sortable="true" Filterable="true" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGridColumn>*@

                <RadzenDataGridColumn TItem="ReportEntityDTO" Title="Скачан из СИР" Sortable="false" Filterable="true" TextAlign="TextAlign.Center">
                    <Columns>
                        <RadzenDataGridColumn TItem="ReportEntityDTO" Property="DownloadTime" Title="Время" Width="100px" TextAlign="TextAlign.Center">
                            </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="ReportEntityDTO" Property="DownloadUserDTOFK.UserName" Title="Кто" Width="100px" TextAlign="TextAlign.Center" Filterable="true">
                            </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="ReportEntityDTO" Property="DownloadSuccessFlag" Title = "Файл" Width="100px" TextAlign="TextAlign.Center" Filterable="true">
                                <Template Context="data">
                                    @*<RadzenCheckBox @bind-Value=data.DownloadSuccessFlag ReadOnly="true" TriState="false" TValue="bool" />*@
                                <RadzenButton title="Скачать файл" Icon="download" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DownloadReportEntityDownloadFile(data.Id))" @onclick:stopPropagation="true">
                                </RadzenButton>

                                </Template>
                            </RadzenDataGridColumn>
@*                        <RadzenDataGridColumn TItem="ReportEntityDTO" Property="DownloadSuccessFlag" Title="Успех" Width="4%" TextAlign="TextAlign.Center" Filterable="true">
                            <Template Context="data">
                                <RadzenButton title="Скачать файл" Icon="download" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DownloadReportEntityDownloadFile(data.Id))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            </Template>
                        </RadzenDataGridColumn>
*@                    </Columns>

                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="ReportEntityDTO" Title="Загружен в СИР" Sortable="false" Filterable="true" TextAlign="TextAlign.Center">
                    <Columns>
                        <RadzenDataGridColumn TItem="ReportEntityDTO" Property="UploadTime" Title="Время" Width="100px" TextAlign="TextAlign.Center">
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="ReportEntityDTO" Property="UploadUserDTOFK.UserName" Title="Кем" Width="100px" TextAlign="TextAlign.Center" Filterable="true">
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="ReportEntityDTO" Property="UploadSuccessFlag" Title = "Файл" Filterable="true" Width="100px" TextAlign="TextAlign.Center">
                            <Template Context="data">
                                <RadzenButton title="Скачать файл" Icon="download" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => DownloadReportEntityUploadFile(data.Id))" @onclick:stopPropagation="true">
                                </RadzenButton>

@*                                <RadzenCheckBox @bind-Value=data.UploadSuccessFlag ReadOnly="true" TriState="true" TValue="bool" />*@
                            </Template>
                        </RadzenDataGridColumn>
                        </Columns>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ReportEntityDTO" Context="reportEntityDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                    <Template Context="reportEntityDTO">
                        @*<a href="/DownloadFileController/DownloadReportTemplateFile/@reportTemplateDTO.Id">                         </a>*@
                        <RadzenButton title="Детали" ButtonStyle="ButtonStyle.Info" Icon="info" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => ShowReportEntityDetails(reportEntityDTO))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        @*   </div>*@

    }
    else
    {
        if (IsLoading)
        {
            //отображение gif загрузки
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>

        }
    }

</div>


@code {

    _Dialogs? _dialogs { get; set; }

    IEnumerable<ReportEntityDTO>? reportEntityDTOs;

    RadzenDataGrid<ReportEntityDTO> reportEntityDTOGrid;

    DateTime startDate = DateTime.Today.AddDays(-7);
    DateTime endDate = DateTime.Today.AddDays(1).AddSeconds(-1);
    DateTime maxEndDate = DateTime.Today.AddDays(1).AddSeconds(-1);
    DateTime minEndDate = DateTime.Today.AddDays(-8);

    int applyRadioGroupValue = 1;

    bool ApplyButtonDisabled = true;

    public bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            applyRadioGroupValue = 1;
            ApplyButtonDisabled = false;

            await GetRows();

            //startDate = DateTime.Today.AddDays(-7);
            //endDate = DateTime.Today.AddDays(1).AddSeconds(-1);
            //maxEndDate = DateTime.Today.AddDays(1).AddSeconds(-1);
            //minEndDate = DateTime.Today.AddDays(-8);

            //IsLoading = true;
            //await LoadStateAsync();
            //StateHasChanged();
            //reportEntityDTOs = await _reportEntityRepository.GetAllByDownloadTimeInterval(startDate, endDate);

            //IsLoading = false;
            //StateHasChanged();
        }
    }


    DataGridSettings _reportEntityGridSettings;
    public DataGridSettings ReportEntityGridSettings
    {
        get
        {
            return _reportEntityGridSettings;
        }
        set
        {
            if (_reportEntityGridSettings != value)
            {
                _reportEntityGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "ReportEntityGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _reportEntityGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('ReportEntityGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(ReportEntityGridSettings)}')");
    }

    async Task DownloadReportEntityDownloadFile(Guid id)
    {
        //_navigationManager.NavigateTo("/DownloadFileController/DownloadReportTemplateFile/" + id.ToString());
        await _jsRuntime.InvokeVoidAsync("open", "/DownloadFileController/DownloadReportEntityDownloadFile/" + id.ToString(), "_blank");
    }

    async Task DownloadReportEntityUploadFile(Guid id)
    {
        //_navigationManager.NavigateTo("/DownloadFileController/DownloadReportTemplateFile/" + id.ToString());
        await _jsRuntime.InvokeVoidAsync("open", "/DownloadFileController/DownloadReportEntityUploadFile/" + id.ToString(), "_blank");
    }

    private async Task ChangeStartDate()
    {
        ApplyButtonDisabled = false;
        maxEndDate = startDate.AddDays(7).AddSeconds(-1);
        minEndDate = startDate.AddDays(-1);
        if (endDate > maxEndDate)
            endDate = maxEndDate;        

    }

    private async Task ChangeEndDate()
    {

        ApplyButtonDisabled = false;
    }


    async Task GetRows()
    {
        IsLoading = true;
        await LoadStateAsync();
        StateHasChanged();
        if (applyRadioGroupValue == 1)
            reportEntityDTOs = await _reportEntityRepository.GetAllByDownloadTimeInterval(startDate, endDate);
        else 
            reportEntityDTOs = await _reportEntityRepository.GetAllByUploadTimeInterval(startDate, endDate);
        ApplyButtonDisabled = true;
        IsLoading = false;
        StateHasChanged();

    }



    async Task ShowReportEntityDetails(ReportEntityDTO reportEntityDTO)
    {

        IsLoading = true;

        ReportEntityDTO dialogResult = null;

        if (reportEntityDTO == null)
        {
            await _jsRuntime.ToastrError("Пустой объект для отображения деталей записи");
            IsLoading = false;
            return;
        }
        else
        {
            IsLoading = false;
            dialogResult = await _dialogService.OpenAsync<ReportEntityDetails>("Подробно по экземпляру отчёта ", new Dictionary<string, object>() { { "ReportEntityId", reportEntityDTO.Id } }, new DialogOptions() { Width = $"{1100}px" });
        }

        IsLoading = false;
    }

}
