@page "/reports/ReportTemplateType"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.EntityFrameworkCore;

@inject IJSRuntime _jsRuntime
@inject IReportTemplateTypeRepository _reportTemplateTypeRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository

@if (IsAdmin == true)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">

        <div class="col-6">
            <h6 class="card-title text-primary"><a href="/reports">Отчёты</a> - <a href="/reports/ReportTemplateType">Типы шаблонов отчётов</a></h6>
        </div>

        @if (IsLoading != true)
        {
            <RadzenRow AlignItems="AlignItems.Start">
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Добавить новый тип шаблонов отчётов" Click="@InsertRow" Disabled=@(reportTemplateTypeDTOToInsert != null || reportTemplateTypeDTOToUpdate != null) />
                <RadzenButton class="mt-2 mb-4" title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" Text="Экспорт в Excel" Icon="grid_on" Click="@(args => ExcelExport())" IsBusy=@excelExportFlag BusyText="Выполняется ..." />
            </RadzenRow>


            <RadzenDataGrid @ref="reportTemplateTypeDTOGrid" AllowAlternatingRows="true" AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                            Data="@reportTemplateTypeDTOs" TItem="ReportTemplateTypeDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            EmptyText="Нет записей для отображения"
                            FilterMode="FilterMode.Simple"
                            AllowColumnResize="false"
                            AllowVirtualization="true"
                            GridLines="DataGridGridLines.Both"
                            Style="height:720px">                
                <Columns>
                    <RadzenDataGridColumn TItem="ReportTemplateTypeDTO" Property="Id" Title="Ид записи" Width="120px" />
                    <RadzenDataGridColumn TItem="ReportTemplateTypeDTO" Property="Name" Title="Наименование" Width="250px">
                        <EditTemplate Context="reportTemplateTypeDTO">
                            <RadzenTextBox @bind-Value="reportTemplateTypeDTO.Name" Style="width:100%; display: block" Name="Name" />
                            <RadzenRequiredValidator Text="Наименование обязателено к заполнению" Component="Name" Popup="true" />
                            <RadzenLengthValidator Max=250 Text="Наименование не может быть больше 250 символов" Component="Name" Popup="true" />
                        </EditTemplate>
                    </RadzenDataGridColumn>


                    <RadzenDataGridColumn TItem="ReportTemplateTypeDTO" Property="NeedAutoCalc" Title="Требуется авторасчёт" Width="150px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.NeedAutoCalc ReadOnly="true" TriState="false" TValue="bool?" />
                        </Template>
                        <EditTemplate Context="data">
                            <strong>
                                |
                                <RadzenCheckBox @bind-Value=data.NeedAutoCalc TriState="false" TValue="bool?" />
                                |
                            </strong>
                        </EditTemplate>
                    </RadzenDataGridColumn>


                    <RadzenDataGridColumn TItem="ReportTemplateTypeDTO" Property="IsArchive" Title="Архив" Filterable="true" Width="80px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.IsArchive ReadOnly="true" TriState="true" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="ReportTemplateTypeDTO" Context="reportTemplateTypeDTO" Filterable="true" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                        <Template Context="reportTemplateTypeDTO">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(reportTemplateTypeDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            @if (!reportTemplateTypeDTO.IsArchive)
                            {
                                <RadzenButton Tooltip="Восстановить из архива" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(reportTemplateTypeDTO))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            }
                            else
                            {
                                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="restore_from_trash" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(reportTemplateTypeDTO))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            }
                        </Template>
                        <EditTemplate Context="reportTemplateTypeDTO">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(reportTemplateTypeDTO))">
                            </RadzenButton>
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(reportTemplateTypeDTO))">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(reportTemplateTypeDTO))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        }
        else
        {
            if (IsLoading)
            {
                //отображение gif загрузки
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>

            }
        }
    </div>
}

@code {

    _Dialogs? _dialogs { get; set; }

    public string DeleteMessage { get; set; } = "";

    RadzenDataGrid<ReportTemplateTypeDTO> reportTemplateTypeDTOGrid;

    IEnumerable<ReportTemplateTypeDTO> reportTemplateTypeDTOs;

    ReportTemplateTypeDTO reportTemplateTypeDTOToInsert;
    ReportTemplateTypeDTO reportTemplateTypeDTOToUpdate;

    public bool IsLoading { get; set; }
    public bool IsAdmin { get; set; }
    public bool excelExportFlag { get; set; } = false;

    void Reset()
    {
        reportTemplateTypeDTOToInsert = null;
        reportTemplateTypeDTOToUpdate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsAdmin = true;
            if (firstRender)
            {
                IsLoading = true;
                StateHasChanged();
                reportTemplateTypeDTOs = _reportTemplateTypeRepository.GetAll(SD.SelectDictionaryScope.All).Result;
                IsLoading = false;
                StateHasChanged();
            }
        }
        else
            _navigationManager.NavigateTo("/reports");
    }

    async Task EditRow(ReportTemplateTypeDTO reportTemplateTypeDTO)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            reportTemplateTypeDTOToUpdate = reportTemplateTypeDTO;
            await reportTemplateTypeDTOGrid.EditRow(reportTemplateTypeDTO);
        }
    }

    async Task OnUpdateRow(ReportTemplateTypeDTO reportTemplateTypeDTO)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            if (reportTemplateTypeDTO == reportTemplateTypeDTOToInsert)
            {
                reportTemplateTypeDTOToInsert = null;
            }

            reportTemplateTypeDTOToUpdate = null;


            var objectForCheckName = await _reportTemplateTypeRepository.GetByName(reportTemplateTypeDTO.Name);
            if (objectForCheckName != null)
            {
                if (objectForCheckName.Id != reportTemplateTypeDTO.Id)
                {
                    var objectForRestore = await _reportTemplateTypeRepository.Get(reportTemplateTypeDTO.Id);
                    reportTemplateTypeDTO.Name = objectForRestore.Name;
                    reportTemplateTypeDTO.NeedAutoCalc = objectForRestore.NeedAutoCalc;
                    await reportTemplateTypeDTOGrid.UpdateRow(reportTemplateTypeDTO);
                    await reportTemplateTypeDTOGrid.Reload();
                    await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Уже есть запись типа шаблона отчётов с наименованием \"" + objectForCheckName.Name + "\" с ИД записи = " + objectForCheckName.Id.ToString());
                    return;
                }
            }

            await _reportTemplateTypeRepository.Update(reportTemplateTypeDTO, SD.UpdateMode.Update);
        }
    }

    async Task SaveRow(ReportTemplateTypeDTO reportTemplateTypeDTO)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            await reportTemplateTypeDTOGrid.UpdateRow(reportTemplateTypeDTO);
        }
    }

    void CancelEdit(ReportTemplateTypeDTO reportTemplateTypeDTO)
    {
        if (reportTemplateTypeDTO == reportTemplateTypeDTOToInsert)
        {
            reportTemplateTypeDTOToInsert = null;
        }

        reportTemplateTypeDTOToUpdate = null;

        var objectForRestore = _reportTemplateTypeRepository.Get(reportTemplateTypeDTO.Id).GetAwaiter().GetResult();
        if (objectForRestore != null)
        {
            reportTemplateTypeDTO.Name = objectForRestore.Name;
            reportTemplateTypeDTO.NeedAutoCalc = objectForRestore.NeedAutoCalc;
            reportTemplateTypeDTOGrid.UpdateRow(reportTemplateTypeDTO);
        }
        reportTemplateTypeDTOGrid.Reload();

        reportTemplateTypeDTOGrid.CancelEditRow(reportTemplateTypeDTO);

    }

    async Task DeleteRow(ReportTemplateTypeDTO reportTemplateTypeDTO)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            if (_dialogs != null)
            {
                if (reportTemplateTypeDTO.IsArchive != true)
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление типа шаблона отчётов", "Удалить тип шаблона \"" + reportTemplateTypeDTO.Name + "\" в архив ?", "Удалить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена удаления");
                        return;
                    }
                }
                else
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Восстановление типа шаблона отчётов", "Восстановить тип шаблона \"" + reportTemplateTypeDTO.Name + "\" из архива ?", "Восстановить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена восстановления");
                        return;
                    }
                }
            }

            if (reportTemplateTypeDTO == reportTemplateTypeDTOToInsert)
            {
                reportTemplateTypeDTOToInsert = null;
            }

            if (reportTemplateTypeDTO == reportTemplateTypeDTOToUpdate)
            {
                reportTemplateTypeDTOToUpdate = null;
            }

            if (reportTemplateTypeDTOs.Contains(reportTemplateTypeDTO))
            {
                if (reportTemplateTypeDTO.IsArchive)
                {
                    await _reportTemplateTypeRepository.Update(reportTemplateTypeDTO, SD.UpdateMode.RestoreFromArchive);
                    reportTemplateTypeDTO.IsArchive = false;
                    await _jsRuntime.ToastrSuccess("Тип шаблона отчёта " + reportTemplateTypeDTO.Name + " восстановлен из архива");
                }
                else
                {
                    await _reportTemplateTypeRepository.Update(reportTemplateTypeDTO, SD.UpdateMode.MoveToArchive);
                    reportTemplateTypeDTO.IsArchive = true;
                    await _jsRuntime.ToastrSuccess("Тип шаблона отчёта " + reportTemplateTypeDTO.Name + " удален в архив");
                }
                await reportTemplateTypeDTOGrid.UpdateRow(reportTemplateTypeDTO);
                //await sapEquipmentDTOGrid.Reload();
            }
            else
            {
                reportTemplateTypeDTOGrid.CancelEditRow(reportTemplateTypeDTO);
                await reportTemplateTypeDTOGrid.Reload();
            }
        }
    }

    async Task InsertRow()
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            reportTemplateTypeDTOToInsert = new ReportTemplateTypeDTO();
            reportTemplateTypeDTOToInsert.NeedAutoCalc = false;
            await reportTemplateTypeDTOGrid.InsertRow(reportTemplateTypeDTOToInsert);
        }
    }

    async Task OnCreateRow(ReportTemplateTypeDTO reportTemplateTypeDTO)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            reportTemplateTypeDTOToInsert = null;

            var objectForCheckName = await _reportTemplateTypeRepository.GetByName(reportTemplateTypeDTO.Name);
            if (objectForCheckName != null)
            {
                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Уже есть запись типа шаблона отчётов с наименованием \"" + objectForCheckName.Name + "\" с ИД записи = " + objectForCheckName.Id.ToString());
                reportTemplateTypeDTOGrid.CancelEditRow(reportTemplateTypeDTO);
                await reportTemplateTypeDTOGrid.Reload();
                return;
            }

            var newDTO = await _reportTemplateTypeRepository.Create(reportTemplateTypeDTO);

            //reportTemplateTypeDTOToInsert.Id = newDTO.Id;
            //await reportTemplateTypeDTOGrid.UpdateRow(reportTemplateTypeDTOToInsert);

            await OnAfterRenderAsync(true);
        }
    }

    async Task ExcelExport()
    {
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
            string filename = "ReportTemplateType_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
            await _simpleExcelExportRepository.GenerateExcelReportTemplateType(filename, (IEnumerable<ReportTemplateTypeDTO>)reportTemplateTypeDTOGrid.View);
            await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }
}



