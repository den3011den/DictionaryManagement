@page "/administration/MesDepartment"

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Common;
@using DictionaryManagement_DataAccess.Data.IntDB;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.EntityFrameworkCore;


@inject IJSRuntime _jsRuntime
@inject IMesDepartmentRepository _mesDepartmentRepository


<_Dialogs @ref="_dialogs"></_Dialogs>



<div class="row mt-4">

    <div class="col-6">
        <h4 class="card-title text-primary"><a href="/administration">Администрирование</a> - <a href="/administration/MesDepartment">Производства</a></h4>
@*        <div class="col-6">
            <RadzenCheckBox @bind-Value=@checkBoxValue TriState="true" TValue="bool?" Change=@OnArchiveCheckBoxChange Name="ArchiveCheckBox" />
            <RadzenLabel Text=@checkBoxText Component="ArchiveCheckBox" Style="margin-left: 8px; vertical-align: middle;" />
        </div>*@
    </div>

    @if (IsLoading != true)
    {

        @*        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Добавить новое производство" Click="@InsertRow" Disabled=@(sapToMesMaterialMappingDTOToInsert != null || sapToMesMaterialMappingDTOToUpdate != null) />*@
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Добавить новое производство" />
        <RadzenDataGrid @ref="grid" AllowColumnResize="true" ExpandMode="DataGridExpandMode.Single"
                        Data="@mesDepartmentDTOs" TItem="MesDepartmentDTO" RowRender="@RowRender" LoadChildData="@LoadChildData"
                        RowCollapse="@(args => grid.ColumnsCollection.ToList().ForEach(c => c.ClearFilters()))"
                        AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true" AllowMultiColumnSorting="true"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        FilterMode="FilterMode.Simple">            
            <Columns>
                <RadzenDataGridColumn TItem="MesDepartmentDTO" Title="Наименование" Frozen="true" Width="300px">
                    <Template Context="data">
                        @*<RadzenImage Path="@data.Photo" class="rz-gravatar me-1" />*@
                        @*<strong>@data.MesCode @data.ShortName</strong>*@
                        <strong>@data.Name</strong>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="MesDepartmentDTO" Property="MesCode" Title="Код" Width="240px" />                
                <RadzenDataGridColumn TItem="MesDepartmentDTO" Property="Name" Title="Сокр. наименование" Width="240px" />

                @*<RadzenDataGridColumn TItem="MesDepartmentDTO" Property="ShortName" Title="Hire Date" FormatString="{0:d}" Width="160px" />
            <RadzenDataGridColumn TItem="MesDepartmentDTO" Property="City" Title="City" Width="200px" />
            <RadzenDataGridColumn TItem="Employee" Property="HomePhone" Title="Home Phone" Width="200px" />
            <RadzenDataGridColumn TItem="Employee" Property="Extension" Title="Extension" />*@

                <RadzenDataGridColumn TItem="MesDepartmentDTO" Property="IsAtchive" Title="Архив" Filterable="false" Width="50px">
                    <Template Context="data">
                        <RadzenCheckBox @bind-Value=data.IsArchive ReadOnly="true" TriState="false" TValue="bool" />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="MesDepartmentDTO" Context="mesDepartmentDTO" Filterable="true" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                    <Template Context="mesDepartmentDTO">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(mesDepartmentDTO))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        @if (!mesDepartmentDTO.IsArchive)
                        {
                            <RadzenButton Tooltip="Восстановить из архива" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mesDepartmentDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        }
                        else
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="restore_from_trash" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mesDepartmentDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        }

                    </Template>
@*                    <EditTemplate Context="mesDepartmentDTO">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(mesMaterialDTO))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(mesMaterialDTO))">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(mesMaterialDTO))">
                        </RadzenButton>
                    </EditTemplate>
*@                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>

    }
    else
    {
        if (IsLoading)
        {
            //отображение gif загрузки
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>

        }
    }

</div>


@code {

    _Dialogs? _dialogs { get; set; }

    //public bool? checkBoxValue = null;
    //public string checkBoxText = "Все записи";

    IEnumerable<MesDepartmentDTO>? mesDepartmentDTOs;
    RadzenDataGrid<MesDepartmentDTO> grid;

    RadzenDataGrid<MesDepartmentDTO> mesDepartmentDTOGrid;

    public bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        //employees = dbContext.Employees.Where(e => e.ReportsTo == null);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            mesDepartmentDTOs = await _mesDepartmentRepository.GetAllTopLevel();
            IsLoading = false;
            StateHasChanged();
        }
    }

    void RowRender(RowRenderEventArgs<MesDepartmentDTO> args)
    {
        //args.Expandable = dbContext.Employees.Where(e => e.ReportsTo == args.Data.EmployeeID).Any();        
            args.Expandable = _mesDepartmentRepository.HasChild(args.Data.Id).GetAwaiter().GetResult();
    }

    void LoadChildData(DataGridLoadChildDataEventArgs<MesDepartmentDTO> args)
    {
        args.Data = _mesDepartmentRepository.GetChildList(args.Item.Id).GetAwaiter().GetResult();
        
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    base.OnAfterRender(firstRender);

    //    if (firstRender)
    //    {
    //        await grid.ExpandRow(mesDepartmentDTOs.FirstOrDefault());
    //    }
    //}

    async Task EditRow(MesDepartmentDTO mesDepartmentDTO)
    {
        //mesMaterialDTOToUpdate = mesMaterialDTO;
        //await mesMaterialDTOGrid.EditRow(mesMaterialDTO);
    }


    async Task DeleteRow(MesDepartmentDTO mesDepartmentDTO)
    {

        //if (_dialogs != null)
        //{
        //    if (mesMaterialDTO.IsArchive != true)
        //    {
        //        bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление материала MES", "Удалить материал MES \"" + mesMaterialDTO.ShortName + "\" в архив ?", "Удалить", "Отмена");
        //        if (selectionResult == false)
        //        {
        //            await _jsRuntime.ToastrSuccess("Отмена удаления");
        //            return;
        //        }
        //    }
        //    else
        //    {
        //        bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Восстановление материала MES", "Восстановить материал MES \"" + mesMaterialDTO.ShortName + "\" из архива ?", "Восстановить", "Отмена");
        //        if (selectionResult == false)
        //        {
        //            await _jsRuntime.ToastrSuccess("Отмена восстановления");
        //            return;
        //        }
        //    }
        //}

        //if (mesMaterialDTO == mesMaterialDTOToInsert)
        //{
        //    mesMaterialDTOToInsert = null;
        //}

        //if (mesMaterialDTO == mesMaterialDTOToUpdate)
        //{
        //    mesMaterialDTOToUpdate = null;
        //}

        //if (mesMaterialDTOs.Contains(mesMaterialDTO))
        //{
        //    if (mesMaterialDTO.IsArchive)
        //    {
        //        await _mesMaterialRepository.Update(mesMaterialDTO, SD.UpdateMode.RestoreFromArchive);
        //        mesMaterialDTO.IsArchive = false;
        //        await _jsRuntime.ToastrSuccess("Материал \"" + mesMaterialDTO.Name + "\" восстановлен из архива");
        //    }
        //    else
        //    {
        //        await _mesMaterialRepository.Update(mesMaterialDTO, SD.UpdateMode.MoveToArchive);
        //        mesMaterialDTO.IsArchive = true;
        //        await _jsRuntime.ToastrSuccess("Материал \"" + mesMaterialDTO.Name + "\" удалён в архив");
        //    }
        //    await mesMaterialDTOGrid.UpdateRow(mesMaterialDTO);
        //}
        //else
        //{
        //    mesMaterialDTOGrid.CancelEditRow(mesMaterialDTO);
        //    await mesMaterialDTOGrid.Reload();
        //}
    }

}