@page "/administration/Role"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_DataAccess.Data.IntDB;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.EntityFrameworkCore;
@using System.Text.Json;


@inject IJSRuntime _jsRuntime
@inject IRoleVMRepository _roleVMRepository
@* @inject IRoleRepository _roleRepository *@

@inject DialogService _dialogService


@if (IsAdmin == true)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row mt-4">

        <div class="col-6">
            <h4 class="card-title text-primary"><a href="/administration">Администрирование</a> - <a href="/administration/Role">Роли</a></h4>
        </div>


        @if (IsLoading != true)
        {

            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Добавить новую роль" Click="@(args => EditRow(null))" />
            <RadzenDataGrid @bind-Settings="@RoleGridSettings" @ref="roleVMDTOGrid" AllowAlternatingRows="false" AllowFiltering="true" PageSize="5" AllowPaging="true" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                            Data="@roleVMDTOs" TItem="RoleVMDTO"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            FilterMode="FilterMode.Simple"
                            AllowColumnResize="true"
                            Density=Density.Compact
                            ShowPagingSummary="true"
                            EmptyText="Нет записей для отображения"
                            AllowVirtualization="true">
                <Columns>
                    <RadzenDataGridColumn TItem="RoleVMDTO" Property="ToStringId" Title="Ид роли" Width="70px"
                              FilterProperty="ToStringId" FilterOperator="FilterOperator.Contains" SortProperty="ToStringId">
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="RoleVMDTO" Property="Name" Title="Наименование" Width="100px" FilterProperty="Name" SortProperty="Name">
                        <Template Context="data2">
                            <RadzenCard Style="white-space:pre-wrap">
                                <RadzenText TextStyle="TextStyle.Body2">
                                    <strong>
                                        @data2.Name
                                    </strong>
                                </RadzenText>
                            </RadzenCard>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="RoleVMDTO" Property="Description" Title="Описание" Width="100px" FilterProperty="Description" SortProperty="Description">
                        <Template Context="data3">
                            <RadzenCard Style="white-space:pre-wrap">
                                <RadzenText TextStyle="TextStyle.Body2">                                    
                                        @data3.Description                                    
                                </RadzenText>
                            </RadzenCard>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="RoleVMDTO" Property="IsArchive" Title="Арх" Filterable="true" Width="20px">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.IsArchive ReadOnly="true" TriState="false" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="RoleVMDTO" Context="roleVMDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="47px">
                        <Template Context="roleVMDTO">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(roleVMDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            @if (!roleVMDTO.IsArchive)
                            {
                                <RadzenButton Tooltip="Восстановить из архива" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(roleVMDTO))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            }
                            else
                            {
                                <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="restore_from_trash" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(roleVMDTO))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>

        }
        else
        {
            if (IsLoading)
            {
                //отображение gif загрузки
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>

            }
        }

    </div>

}
@code {

    _Dialogs? _dialogs { get; set; }

    IEnumerable<RoleVMDTO>? roleVMDTOs;

    RadzenDataGrid<RoleVMDTO> roleVMDTOGrid;

    public bool IsLoading { get; set; }
    public bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsAdmin = true;
            if (firstRender)
            {
                IsLoading = true;
                //StateHasChanged();
                await LoadStateAsync();
                StateHasChanged();
                roleVMDTOs = await _roleVMRepository.GetAll(SD.SelectDictionaryScope.All);
                IsLoading = false;
                StateHasChanged();
            }
        }
        else
            _navigationManager.NavigateTo("/administration");

    }


    DataGridSettings _roleGridSettings;
    public DataGridSettings RoleGridSettings
    {
        get
        {
            return _roleGridSettings;
        }
        set
        {
            if (_roleGridSettings != value)
            {
                _roleGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "RoleGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _roleGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('RoleGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(RoleGridSettings)}')");
    }



    async Task EditRow(RoleVMDTO roleVMDTO)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsLoading = true;

            RoleVMDTO dialogResult;

            if (roleVMDTO == null)
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<AddEditRole>("Создать роль СИР", new Dictionary<string, object>() { { "RoleId", 0 } }, new DialogOptions() { Width = $"{1000}px" });
            }
            else
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<AddEditRole>("Изменить роль СИР", new Dictionary<string, object>() { { "RoleId", roleVMDTO.Id } }, new DialogOptions() { Width = $"{1000}px" });
            }


            if (dialogResult != null)
            {
                IsLoading = true;
                await LoadStateAsync();
                StateHasChanged();
                roleVMDTOs = await _roleVMRepository.GetAll(SD.SelectDictionaryScope.All);
                IsLoading = false;
                StateHasChanged();
            }

            IsLoading = false;
        }

    }


    async Task DeleteRow(RoleVMDTO roleVMDTO)
    {

        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            if (_dialogs != null)
            {
                if (roleVMDTO.IsArchive != true)
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление роли СИР", "Удалить роль \"" + roleVMDTO.Name + "\" в архив ?", "Удалить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена удаления");
                        return;
                    }
                }
                else
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Восстановление роли СИР", "Восстановить роль СИР \"" + roleVMDTO.Name + "\" из архива ?", "Восстановить", "Отмена");
                    if (selectionResult == false)
                    {
                        await _jsRuntime.ToastrSuccess("Отмена восстановления");
                        return;
                    }
                }
            }

            if (roleVMDTO.IsArchive)
            {
                await _roleVMRepository.Update(roleVMDTO, SD.UpdateMode.RestoreFromArchive);
                roleVMDTO.IsArchive = false;
                await _jsRuntime.ToastrSuccess("Роль СИР \"" + roleVMDTO.Name + "\" восстановлена из архива");
            }
            else
            {
                await _roleVMRepository.Update(roleVMDTO, SD.UpdateMode.MoveToArchive);
                roleVMDTO.IsArchive = true;
                await _jsRuntime.ToastrSuccess("Роль СИР \"" + roleVMDTO.Name + "\" удалёна в архив");
            }
            await roleVMDTOGrid.UpdateRow(roleVMDTO);
        }
    }

}