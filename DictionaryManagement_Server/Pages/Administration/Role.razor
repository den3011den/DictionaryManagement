@page "/administration/Role"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_DataAccess.Data.IntDB;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.EntityFrameworkCore;
@using System.Text.Json;


@inject IJSRuntime _jsRuntime
@inject IRoleVMRepository _roleVMRepository
@inject IUserToRoleRepository _userToRoleRepository
@inject IReportTemplateTypeTоRoleRepository _reportTemplateTypeTоRoleRepository
@inject IRoleToADGroupRepository _roleToADGroupRepository
@* @inject IRoleRepository _roleRepository *@

@inject DialogService _dialogService


@if (IsAdmin == true)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">

        <div class="col-6">
            <h4 class="card-title text-primary"><a href="/administration">Администрирование</a> - <a href="/administration/Role">Роли</a></h4>
        </div>


        @if (IsLoading != true)
        {

            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Добавить новую роль" Click="@(args => EditRow(null))" />
            <RadzenDataGrid @bind-Settings="@RoleGridSettings" @ref="roleVMDTOGrid" AllowAlternatingRows="true"
                            AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single" GridLines="DataGridGridLines.Both"
                            Data="@roleVMDTOs" TItem="RoleVMDTO"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            FilterMode="FilterMode.Simple"
                            AllowColumnResize="true"
                            Density=Density.Compact
                            ShowPagingSummary="true"
                            EmptyText="Нет записей для отображения"
                            AllowVirtualization="true"
                            Style="height:720px">
                <Columns>
                    <RadzenDataGridColumn TItem="RoleVMDTO" Property="ToStringId" Title="Ид роли" Width="35px"
                                          FilterProperty="ToStringId" FilterOperator="FilterOperator.Contains" SortProperty="ToStringId">
                        <Template Context="data1">
                            <div style="white-space:pre-wrap; font-size: 10px">
                                @data1.ToStringId
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="RoleVMDTO" Property="Name" Title="Наименование" Width="45px" FilterProperty="Name" SortProperty="Name" FilterOperator="FilterOperator.Contains">
                        <Template Context="data2">
                            @* <RadzenCard Style="white-space:pre-wrap"> *@
                            <div style="white-space:pre-wrap; font-size: 12px">
                                @*                                 <RadzenText TextStyle="TextStyle.Body2"> *@
                                <strong>
                                    @data2.Name
                                </strong>
                                @*                                 </RadzenText> *@
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="RoleVMDTO" Property="Description" Title="Описание" Width="33px" FilterProperty="Description" SortProperty="Description" FilterOperator="FilterOperator.Contains">
                        <Template Context="data3">
                            <div style="white-space:pre-wrap; font-size: 10px">
                                @*                             <RadzenCard Style="white-space:pre-wrap">
                        <RadzenText TextStyle="TextStyle.Body2"> *@
                                @data3.Description
                                @*                                 </RadzenText>
                        </RadzenCard> *@
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="RoleVMDTO" Property="IsArchive" Title="Арх" Filterable="true" Width="8px">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.IsArchive ReadOnly="true" TriState="false" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="RoleVMDTO" Context="roleVMDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="16px">
                        <Template Context="roleVMDTO">
                            <RadzenButton title="Редактировать роль" Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(roleVMDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            @if (!roleVMDTO.IsArchive)
                            {
                                <RadzenButton title="Удалить роль в архив" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(roleVMDTO))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            }
                            else
                            {
                                <RadzenButton title="Восстановить роль из архива" ButtonStyle="ButtonStyle.Info" Icon="restore_from_trash" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(roleVMDTO))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            }
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="RoleVMDTO" Property="UserToRoleDTOs" FilterProperty="UsersLoginAndNameString" Title="Пользователи роли" Sortable="false" Filterable="true" Width="42px" FilterOperator="FilterOperator.Contains">

                        <Template Context="data">
                            <div class="row" style="width: 100%; padding: 0; overflow: hidden;justify-content: center; font-size: 10px">
                                <div class="text-center" style="width: 100%;font-size: 10px">
                                    <button title=@($"Добавить пользователя к роли {data.Name}") class="btn btn-link" style="width: 100%; padding: 0; overflow: hidden; font-size:10px;align-items: center; justify-content: center;" @onclick="()=>LinkUserToRole(data)"> + Добавить пользователя + </button>
                                </div>
                            </div>

                            <RadzenDataList WrapItems="true" Density=Density.Compact AllowPaging="true" Data="data.UserToRoleDTOs" PagerHorizontalAlign="HorizontalAlign.Left" TItem="UserToRoleDTO" PageSize="4" ShowPagingSummary="false">
                                <Template Context="user">
                                    <RadzenCard Style="white-space:pre-wrap; width: 100%; padding: 1px 1px 1px 1px; overflow: hidden;font-size: 10px">
                                        <div class="row g-2" style="width: 100%; padding: 0">
                                            <div class="col-md-11 col-lg-0" style="width: 82%; font-size: 10px">
                                                <b>@user.UserDTOFK?.UserName (@(@user.UserDTOFK?.Login))</b>
                                            </div>
                                            <div class="col-md-1 col-lg-0" style="width: 10%; font-size: 10px;">
                                                <b><a href="" title=@($"Отвязать пользователя {user.UserDTOFK?.UserName} от роли {data.Name}") @onclick="@(()=>DeleteUser(data, user.UserDTOFK))" style="text-decoration: none !important; color:#DC143C;  text-align: right !important" @onclick:preventDefault>X</a></b>
                                            </div>
                                        </div>
                                    </RadzenCard>
                                </Template>
                            </RadzenDataList>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="RoleVMDTO" Property="ReportTemplateTypeTоRoleDTOs" FilterProperty="ReportTemplateTypeString" Title="Шаблоны отчётов" Sortable="false" Filterable="true" Width="42px" FilterOperator="FilterOperator.Contains">

                        <Template Context="data">
                            <div class="row" style="width: 100%; padding: 0; overflow: hidden;justify-content: center; font-size: 10px">
                                <div class="text-center" style="width: 100%; font-size: 10px">
                                    <button title=@($"Добавить шаблон отчёта к роли {data.Name}") class="btn btn-link" style="width: 100%; padding: 0; overflow: hidden; font-size:10px;align-items: center; justify-content: center;" @onclick="()=>LinkReportTemplateTypeToRole(data)"> + Добавить шаблон отчёта + </button>
                                </div>
                            </div>

                            <RadzenDataList WrapItems="true" Density=Density.Compact AllowPaging="true" Data="data.ReportTemplateTypeTоRoleDTOs" PagerHorizontalAlign="HorizontalAlign.Left" TItem="ReportTemplateTypeTоRoleDTO" PageSize="4" ShowPagingSummary="false">
                                <Template Context="reportTemplate">
                                    <RadzenCard Style="white-space:pre-wrap; width: 100%; padding: 1px 1px 1px 1px; overflow: hidden; font-size: 10px">
                                        <div class="row" style="width: 100%; padding: 0">
                                            <div class="col-md-12 col-lg-0" style="width: 82%; font-size: 10px">
                                                <b>@reportTemplate.ReportTemplateTypeDTOFK?.Name</b>
                                            </div>
                                            <div class="col-md-1 col-lg-0" style="width: 10%; font-size: 10px;">
                                                <b><a href="" title=@($"Отвязать тип шаблона отчёта {reportTemplate.ReportTemplateTypeDTOFK?.Name} от роли {data.Name}") @onclick="@(()=>DeleteReportTemplateType(data, reportTemplate.ReportTemplateTypeDTOFK))" style="text-decoration: none !important; color:#DC143C;" @onclick:preventDefault>X</a></b>
                                            </div>
                                        </div>
                                    </RadzenCard>
                                </Template>
                            </RadzenDataList>
                        </Template>
                    </RadzenDataGridColumn>



                    <RadzenDataGridColumn TItem="RoleVMDTO" Property="RoleToADGroupDTOs" FilterProperty="RoleToADGroupString" Title="Группы AD" Sortable="false" Filterable="true" Width="42px" FilterOperator="FilterOperator.Contains">

                        <Template Context="data">
                            <div class="row" style="width: 100%; padding: 0; overflow: hidden;justify-content: center; font-size: 10px">
                                <div class="text-center" style="width: 100%; font-size: 10px">
                                    <button title=@($"Добавить группу AD к роли {data.Name}") class="btn btn-link" style="width: 100%; padding: 0; overflow: hidden; font-size:10px;align-items: center; justify-content: center;" @onclick="()=>AddADGroup(data)"> + Добавить группу AD + </button>
                                </div>
                            </div>

                            <RadzenDataList WrapItems="true" Density=Density.Compact AllowPaging="true" Data="data.RoleToADGroupDTOs" PagerHorizontalAlign="HorizontalAlign.Left" TItem="RoleToADGroupDTO" PageSize="4" ShowPagingSummary="false">
                                <Template Context="adGroup">
                                    <RadzenCard Style="white-space:pre-wrap; width: 100%; padding: 1px 1px 1px 1px; overflow: hidden; font-size: 10px">
                                        <div class="row" style="width: 100%; padding: 0">
                                            <div class="col-md-12 col-lg-0" style="width: 82%; font-size: 10px">
                                                <b>@adGroup.ADGroupDTOFK?.Name</b>
                                            </div>
                                            <div class="col-md-1 col-lg-0" style="width: 10%; font-size: 10px;">
                                                <b><a href="" title=@($"Отвязать группу AD {adGroup.ADGroupDTOFK?.Name} от роли {data.Name}") @onclick="@(()=>DeleteADGroup(data, adGroup.ADGroupDTOFK))" style="text-decoration: none !important; color:#DC143C;" @onclick:preventDefault>X</a></b>
                                            </div>
                                        </div>
                                    </RadzenCard>
                                </Template>
                            </RadzenDataList>
                        </Template>
                    </RadzenDataGridColumn>

                    @*                      <RadzenDataGridColumn TItem="RoleVMDTO" Property="RoleToDepartmentDTOs" FilterProperty="RoleToDepartmentString" Title="Производства" Sortable="false" Filterable="true" Width="32px" FilterOperator="FilterOperator.Contains">

            <Template Context="data">
            <div class="row" style="width: 100%; padding: 0; overflow: hidden;justify-content: center; font-size: 10px">
            <div class="text-center" style="width: 100%; font-size: 10px">
            <button title=@($"Добавить производство к роли {data.Name}") class="btn btn-link" style="width: 100%; padding: 0; overflow: hidden; font-size:10px;align-items: center; justify-content: center;" @onclick="()=>AddDepartment(data)"> + Добавить производство + </button>
            </div>
            </div>

            <RadzenDataList WrapItems="true" Density=Density.Compact AllowPaging="true" Data="data.RoleToDepartmentDTOs" PagerHorizontalAlign="HorizontalAlign.Left" TItem="RoleToDepartmentDTO" PageSize="4" ShowPagingSummary="false">
            <Template Context="department">
            <RadzenCard Style="white-space:pre-wrap; width: 100%; padding: 1px 1px 1px 1px; overflow: hidden; font-size: 10px">
            <div class="row" style="width: 100%; padding: 0">
            <div class="col-md-12 col-lg-0" style="width: 82%; font-size: 10px">
            <b>@department.DepartmentDTOFK?.ShortName</b>
            </div>
            <div class="col-md-1 col-lg-0" style="width: 10%; font-size: 10px;">
            <b><a href="" title=@($"Отвязать производство {department.DepartmentDTOFK?.Name} от роли {data.Name}") @onclick="@(()=>DeleteDepartment(data))" style="text-decoration: none !important; color:#DC143C;" @onclick:preventDefault>X</a></b>
            </div>
            </div>
            </RadzenCard>
            </Template>
            </RadzenDataList>
            </Template>
            </RadzenDataGridColumn> *@


                </Columns>
            </RadzenDataGrid>

        }
        else
        {
            if (IsLoading)
            {
                //отображение gif загрузки
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>

            }
        }

    </div>
}

@code {

    _Dialogs? _dialogs { get; set; }

    IEnumerable<RoleVMDTO>? roleVMDTOs;

    RadzenDataGrid<RoleVMDTO> roleVMDTOGrid;

    public string? usersFilter = "";

    public bool IsLoading { get; set; }
    public bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsAdmin = true;
            if (firstRender)
            {
                IsLoading = true;
                //StateHasChanged();
                await LoadStateAsync();
                StateHasChanged();
                roleVMDTOs = await _roleVMRepository.GetAll(SD.SelectDictionaryScope.All);
                IsLoading = false;
                StateHasChanged();
            }
        }
        else
            _navigationManager.NavigateTo("/administration");

    }


    DataGridSettings _roleGridSettings;
    public DataGridSettings RoleGridSettings
    {
        get
        {
            return _roleGridSettings;
        }
        set
        {
            if (_roleGridSettings != value)
            {
                _roleGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "RoleGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _roleGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('RoleGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(RoleGridSettings)}')");
    }



    async Task EditRow(RoleVMDTO roleVMDTO)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsLoading = true;

            RoleDTO dialogResult;

            if (roleVMDTO == null)
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<AddEditRole>("Создать роль СИР", new Dictionary<string, object>() { { "RoleId", Guid.Empty } }, new DialogOptions() { Width = $"{700}px" });
            }
            else
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<AddEditRole>("Изменить роль СИР", new Dictionary<string, object>() { { "RoleId", roleVMDTO.Id } }, new DialogOptions() { Width = $"{700}px" });
            }


            if (dialogResult != null)
            {
                if (roleVMDTO == null)
                {
                    IsLoading = true;
                    await LoadStateAsync();
                    StateHasChanged();
                    roleVMDTOs = await _roleVMRepository.GetAll(SD.SelectDictionaryScope.All);
                    IsLoading = false;
                    StateHasChanged();
                    IsLoading = false;
                }
                else
                {
                    roleVMDTO.Name = dialogResult.Name;
                    roleVMDTO.Description = dialogResult.Description;

                    await roleVMDTOGrid.UpdateRow(roleVMDTO);
                }
            }
        }

    }


    async Task DeleteRow(RoleVMDTO roleVMDTO)
    {

        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            if (_dialogs != null)
            {
                if (roleVMDTO.IsArchive != true)
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление роли СИР", "Удалить роль \"" + roleVMDTO.Name + "\" в архив ?", "Удалить", "Отмена");
                    if (selectionResult == false)
                    {
                        // await _jsRuntime.ToastrSuccess("Отмена удаления");
                        return;
                    }
                }
                else
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Восстановление роли СИР", "Восстановить роль СИР \"" + roleVMDTO.Name + "\" из архива ?", "Восстановить", "Отмена");
                    if (selectionResult == false)
                    {
                        // await _jsRuntime.ToastrSuccess("Отмена восстановления");
                        return;
                    }
                }
            }

            if (roleVMDTO.IsArchive)
            {
                await _roleVMRepository.Update(roleVMDTO, SD.UpdateMode.RestoreFromArchive);
                roleVMDTO.IsArchive = false;
                await _jsRuntime.ToastrSuccess("Роль СИР \"" + roleVMDTO.Name + "\" восстановлена из архива");
            }
            else
            {
                await _roleVMRepository.Update(roleVMDTO, SD.UpdateMode.MoveToArchive);
                roleVMDTO.IsArchive = true;
                await _jsRuntime.ToastrSuccess("Роль СИР \"" + roleVMDTO.Name + "\" удалёна в архив");
            }
            await roleVMDTOGrid.UpdateRow(roleVMDTO);
        }
    }

    async Task LinkUserToRole(RoleVMDTO roleVMDTO)
    {

        await _roleVMRepository.GetAllNotArchiveUsersExceptAlreadyInRole(roleVMDTO.Id);

        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsLoading = true;

            RoleVMDTO dialogResult = null;

            if (roleVMDTO == null)
            {
                await _jsRuntime.ToastrError("Пустой объект роли для привязки пользователей");
                IsLoading = false;
                return;
            }
            else
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<LinkUsersToRole>("Привязка пользователей к роли " + roleVMDTO.Name, new Dictionary<string, object>() { { "RoleId", roleVMDTO.Id } }, new DialogOptions() { Width = $"{1100}px" });

                roleVMDTO.UserToRoleDTOs = await _roleVMRepository.GetUsersLinkedToRoleByRoleId(roleVMDTO.Id);
                await roleVMDTOGrid.UpdateRow(roleVMDTO);
            }

            IsLoading = false;
        }
    }


    async Task DeleteUser(RoleVMDTO roleVMDTO, UserDTO userDTO)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            if (_dialogs != null)
            {
                bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление пользователя из роли", "Удалить пользователя \"" + userDTO.UserName +
                        " (" + userDTO.Login + ")" + "\" из роли \"" + roleVMDTO.Name + "\" ?", "Удалить из роли", "Отмена");
                if (selectionResult == false)
                {
                    // await _jsRuntime.ToastrSuccess("Отмена действия");
                    return;
                }
            }
        }

        var userToRoleDTO = await _userToRoleRepository.Get(userDTO.Id, roleVMDTO.Id);

        if (userToRoleDTO != null)
        {
            await _roleVMRepository.DeleteUserToRole(userToRoleDTO.Id);
            await _jsRuntime.ToastrSuccess("Пользователь \"" + userDTO.UserName + " (" + userDTO.Login + ")" + "\" удалён из роли \"" + roleVMDTO.Name + "\"");
        }
        else
        {
            await _jsRuntime.ToastrError("Пользователь \"" + userDTO.UserName + " (" + userDTO.Login + ")" + "\" не найден в роли \"" + roleVMDTO.Name + "\"!");
        }

        List<UserToRoleDTO> newUserToRoleDTOs = roleVMDTO.UserToRoleDTOs.ToList();
        var modifiedNewUserToRoleDTOs = newUserToRoleDTOs.Where(u => !(u.UserId == userDTO.Id && u.RoleId == roleVMDTO.Id));
        roleVMDTO.UserToRoleDTOs = modifiedNewUserToRoleDTOs;

        await roleVMDTOGrid.UpdateRow(roleVMDTO);

    }

    async Task LinkReportTemplateTypeToRole(RoleVMDTO roleVMDTO)
    {
        await _roleVMRepository.GetAllNotArchiveReportTemplateTypesExceptAlreadyInRole(roleVMDTO.Id);

        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsLoading = true;

            RoleVMDTO dialogResult = null;

            if (roleVMDTO == null)
            {
                await _jsRuntime.ToastrError("Пустой объект роли для привязки типов шаблонов отчётов");
                IsLoading = false;
                return;
            }
            else
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<LinkReportTemplateTypeToRole>("Привязка типов шаблонов отчётов к роли " + roleVMDTO.Name, new Dictionary<string, object>() { { "RoleId", roleVMDTO.Id } }, new DialogOptions() { Width = $"{1100}px" });

                roleVMDTO.ReportTemplateTypeTоRoleDTOs = await _roleVMRepository.GetReportTemplateTypesLinkedToRoleByRoleId(roleVMDTO.Id);
                await roleVMDTOGrid.UpdateRow(roleVMDTO);
            }

            IsLoading = false;
        }
    }


    async Task DeleteReportTemplateType(RoleVMDTO roleVMDTO, ReportTemplateTypeDTO reportTemplateTypeDTO)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            if (_dialogs != null)
            {
                bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление типа шаблона отчёта из роли", "Удалить тип шаблона отчёта \"" + reportTemplateTypeDTO.Name +
                        "\" из роли \"" + roleVMDTO.Name + "\" ?", "Удалить из роли", "Отмена");
                if (selectionResult == false)
                {
                    // await _jsRuntime.ToastrSuccess("Отмена действия");
                    return;
                }
            }
        }

        var reportTemplateTypeTоRoleDTO = await _reportTemplateTypeTоRoleRepository.Get(reportTemplateTypeDTO.Id, roleVMDTO.Id);

        if (reportTemplateTypeTоRoleDTO != null)
        {
            await _roleVMRepository.DeleteReportTemplateTypeToRole(reportTemplateTypeTоRoleDTO.Id);
            await _jsRuntime.ToastrSuccess("Тип шаблона отчёта \"" + reportTemplateTypeDTO.Name + "\" удалён из роли \"" + roleVMDTO.Name + "\"");
        }
        else
        {
            await _jsRuntime.ToastrError("Тип шаблона отчёта \"" + reportTemplateTypeDTO.Name + "\" не найден в роли \"" + roleVMDTO.Name + "\"!");
        }

        List<ReportTemplateTypeTоRoleDTO> newReportTemplateTypeToRoleDTOs = roleVMDTO.ReportTemplateTypeTоRoleDTOs.ToList();
        var modifiedNewReportTemplateTypeTоRoleDTOs = newReportTemplateTypeToRoleDTOs.Where(u => !(u.ReportTemplateTypeId == reportTemplateTypeDTO.Id && u.RoleId == roleVMDTO.Id));
        roleVMDTO.ReportTemplateTypeTоRoleDTOs = modifiedNewReportTemplateTypeTоRoleDTOs;

        await roleVMDTOGrid.UpdateRow(roleVMDTO);

    }

    async Task AddADGroup(RoleVMDTO roleVMDTO)
    {
        await _jsRuntime.ToastrSuccess("Метод AddADGroup");
    }

    async Task DeleteADGroup(RoleVMDTO roleVMDTO, ADGroupDTO adGroupDTO)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            if (_dialogs != null)
            {
                bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление группы AD", "Удалить группу AD \"" + adGroupDTO.Name +
                        "\" из роли \"" + roleVMDTO.Name + "\" ?", "Удалить из роли", "Отмена");
                if (selectionResult == false)
                {
                    // await _jsRuntime.ToastrSuccess("Отмена действия");
                    return;
                }
            }
        }

        var roleToADGroupDTO = await _roleToADGroupRepository.Get(adGroupDTO.Id, roleVMDTO.Id);

        if (roleToADGroupDTO != null)
        {
            await _roleVMRepository.DeleteRoleToADGroup(roleToADGroupDTO.Id);
            await _jsRuntime.ToastrSuccess("Группа AD \"" + adGroupDTO.Name + "\" удалёна из роли \"" + roleVMDTO.Name + "\"");
        }
        else
        {
            await _jsRuntime.ToastrError("Группа AD \"" + adGroupDTO.Name + "\" не найдена в роли \"" + roleVMDTO.Name + "\"!");
        }

        List<RoleToADGroupDTO> newRoleToADGroupDTOs = roleVMDTO.RoleToADGroupDTOs.ToList();
        var modifiedNewRoleToADGroupDTOs = newRoleToADGroupDTOs.Where(u => !(u.ADGroupId == adGroupDTO.Id && u.RoleId == roleVMDTO.Id));
        roleVMDTO.RoleToADGroupDTOs = modifiedNewRoleToADGroupDTOs;

        await roleVMDTOGrid.UpdateRow(roleVMDTO);

    }

    // async Task AddDepartment(RoleVMDTO roleVMDTO)
    // {
    //     await _jsRuntime.ToastrSuccess("Метод AddDepartment");
    // }

    // async Task DeleteDepartment(RoleVMDTO roleVMDTO)
    // {
    //     await _jsRuntime.ToastrSuccess("Метод DeleteDepartment");
    //}

}