@page "/administration/Smena"
@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Business.Repository;
@using DictionaryManagement_Common;
@using DictionaryManagement_Models.IntDBModels;
@using System.Text.Json;


@inject IJSRuntime _jsRuntime
@inject ISmenaRepository _smenaRepository

@inject DialogService _dialogService

@inject NavigationManager _navigationManager



<_Dialogs @ref="_dialogs"></_Dialogs>



<div class="row mt-4">

    <div class="col-6">
        <h4 class="card-title text-primary"><a href="/administration">Администрирование</a> - <a href="/administration/Smena">Смены</a></h4>
    </div>


    @if (IsLoading != true)
    {
        
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Добавить новую смену" Click="@(args => EditRow(null))" />
        <RadzenDataGrid @bind-Settings="@SmenaGridSettings" @ref="smenaDTOGrid" AllowAlternatingRows="true" AllowFiltering="true" PageSize="8" AllowPaging="true" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                        Data="@smenaDTOs" TItem="SmenaDTO"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        FilterMode="FilterMode.Simple"                        
                        Density=Density.Compact
                        ShowPagingSummary="true"
                        EmptyText="Нет записей для отображения"
                        AllowVirtualization="true">
            <Columns>
                <RadzenDataGridColumn TItem="SmenaDTO" Property="Id" Title="Ид записи" Width="90px">
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="SmenaDTO" Property="Name" Title="Наименование" Width="100px">
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="SmenaDTO" Property="DepartmentDTOFK.ShortName" Title="Производство" Width="100px" FilterProperty="DepartmentDTOFK.ShortName" SortProperty="DepartmentDTOFK.ShortName">
                    <Template Context="data1">
                        <RadzenCard Style="white-space:pre-wrap">
                            <RadzenText TextStyle="TextStyle.Body2">
                                <strong>
                                    @data1.DepartmentDTOFK.ShortName
                                </strong>
                            </RadzenText>
                        </RadzenCard>
                    </Template>
                </RadzenDataGridColumn>


                <RadzenDataGridColumn TItem="SmenaDTO" Property="StartTime" Title="Время начала" Width="60px">
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="SmenaDTO" Property="HoursDuration" Title="Продолжительность (в часах)" Width="60px">
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="SmenaDTO" Context="smenaDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="55px">
                    <Template Context="smenaDTO">
                        <RadzenButton title="Редактировать" Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(smenaDTO))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton title="Удалить" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(smenaDTO))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        @*   </div>*@

    }
    else
    {
        if (IsLoading)
        {
            //отображение gif загрузки
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>

        }
    }

</div>


@code {

    _Dialogs? _dialogs { get; set; }

    IEnumerable<SmenaDTO>? smenaDTOs;

    RadzenDataGrid<SmenaDTO> smenaDTOGrid;

    public bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {

            IsLoading = true;
            await LoadStateAsync();
            StateHasChanged();
            smenaDTOs = await _smenaRepository.GetAll();
            IsLoading = false;
            StateHasChanged();
        }
    }


    DataGridSettings _smenaGridSettings;
    public DataGridSettings SmenaGridSettings
    {
        get
        {
            return _smenaGridSettings;
        }
        set
        {
            if (_smenaGridSettings != value)
            {
                _smenaGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "SmenaGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _smenaGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('SmenaGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(SmenaGridSettings)}')");
    }


    async Task EditRow(SmenaDTO smenaDTO)
    {

        IsLoading = true;

        SmenaDTO dialogResult = null;

        if (smenaDTO == null)
        {
            IsLoading = false;
            dialogResult = await _dialogService.OpenAsync<AddEditSmena>("Добавить смену", new Dictionary<string, object>() { { "SmenaId", 0 } }, new DialogOptions() { Width = $"{500}px" });
        }
        else
        {
            IsLoading = false;
            dialogResult = await _dialogService.OpenAsync<AddEditSmena>("Изменить смену", new Dictionary<string, object>() { { "SmenaId", smenaDTO.Id } }, new DialogOptions() { Width = $"{500}px" });
        }


        if (dialogResult != null)
        {
            IsLoading = true;
            await LoadStateAsync();
            StateHasChanged();
            smenaDTOs = await _smenaRepository.GetAll();
            IsLoading = false;
            StateHasChanged();
        }

        IsLoading = false;

    }


    async Task DeleteRow(SmenaDTO smenaDTO)
    {

        if (_dialogs != null)
        {
            bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление смены", "Удалить смену \"" + smenaDTO.Name + "\" ?", "Удалить", "Отмена");
            if (selectionResult == false)
            {
                await _jsRuntime.ToastrSuccess("Отмена удаления");
                return;
            }    
        }

        await _smenaRepository.Delete(smenaDTO.Id);
        smenaDTOs = await _smenaRepository.GetAll();
        smenaDTOGrid.Reload();
                

    }

}
