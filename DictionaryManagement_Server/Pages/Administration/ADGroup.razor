@page "/administration/ADGroup"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_DataAccess.Data.IntDB;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.EntityFrameworkCore;
@using System.Text.Json;


@inject IJSRuntime _jsRuntime
@inject IADGroupRepository _adGroupRepository
@inject ISimpleExcelExportRepository _simpleExcelExportRepository

@inject DialogService _dialogService


@if (IsAdmin == true)
{
    <_Dialogs @ref="_dialogs"></_Dialogs>

    <div class="row">

        <div class="col-6">
            <h6 class="card-title text-primary"><a href="/administration">Администрирование</a> - <a href="/administration/ADGroup">Группы AD</a></h6>
        </div>


        @if (IsLoading != true)
        {
            <RadzenRow AlignItems="AlignItems.Start">
                <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Добавить группу AD" Click="@(args => EditRow(null))" />
                <RadzenButton class="mt-2 mb-4" title="Простой экспорт в Excel с учётом применённых фильтров и упорядочивания" Text="Экспорт в Excel" Icon="grid_on" Click="@(args => ExcelExport())" IsBusy=@excelExportFlag BusyText="Выполняется ..." />
            </RadzenRow>
            <RadzenDataGrid @bind-Settings="@ADGroupGridSettings" @ref="adGroupDTOGrid" AllowAlternatingRows="true"
                            AllowFiltering="true" AllowPaging="false" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single" GridLines="DataGridGridLines.Both"
                            Data="@adGroupDTOs" TItem="ADGroupDTO"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            FilterMode="FilterMode.Simple"
                            AllowColumnResize="true"
                            Density=Density.Compact
                            ShowPagingSummary="true"
                            EmptyText="Нет записей для отображения"                            
                            AllowVirtualization="true"
                            Style="height:720px">
                <Columns>
                    <RadzenDataGridColumn TItem="ADGroupDTO" Property="ToStringId" Title="Ид роли" Width="35px"
                                          FilterProperty="ToStringId" FilterOperator="FilterOperator.Contains" SortProperty="ToStringId">
                        <Template Context="data1">
                            <div style="white-space:pre-wrap; font-size: 10px">
                                @data1.ToStringId
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="ADGroupDTO" Property="Name" Title="ФИО" Width="45px" FilterProperty="Name" SortProperty="Name" FilterOperator="FilterOperator.Contains">
                        <Template Context="data2">
                            <div style="white-space:pre-wrap; font-size: 12px">
                                <strong>
                                    @data2.Name
                                </strong>
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="ADGroupDTO" Property="Description" Title="Описание" Width="33px" FilterProperty="Description" SortProperty="Description" FilterOperator="FilterOperator.Contains">
                        <Template Context="data3">
                            <div style="white-space:pre-wrap; font-size: 10px">
                                @data3.Description
                            </div>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="ADGroupDTO" Property="IsArchive" Title="Арх" Filterable="true" Width="8px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenCheckBox @bind-Value=data.IsArchive ReadOnly="true" TriState="false" TValue="bool" />
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="ADGroupDTO" Context="adGroupDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="16px">
                        <Template Context="adGroupDTO">
                            <RadzenButton title="Редактировать группу AD" Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(adGroupDTO))" @onclick:stopPropagation="true">
                            </RadzenButton>
                            @if (!adGroupDTO.IsArchive)
                            {
                                <RadzenButton title="Удалить группу AD в архив" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(adGroupDTO))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            }
                            else
                            {
                                <RadzenButton title="Восстановить группу AD из архива" ButtonStyle="ButtonStyle.Info" Icon="restore_from_trash" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(adGroupDTO))" @onclick:stopPropagation="true">
                                </RadzenButton>
                            }
                        </Template>
                    </RadzenDataGridColumn>

                </Columns>
            </RadzenDataGrid>

        }
        else
        {
            if (IsLoading)
            {
                //отображение gif загрузки
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>

            }
        }

    </div>
}

@code {

    _Dialogs? _dialogs { get; set; }

    IEnumerable<ADGroupDTO>? adGroupDTOs;

    RadzenDataGrid<ADGroupDTO> adGroupDTOGrid;

    public bool IsLoading { get; set; }
    public bool IsAdmin { get; set; }
    public bool excelExportFlag { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsAdmin = true;
            if (firstRender)
            {
                IsLoading = true;
                //StateHasChanged();
                await LoadStateAsync();
                StateHasChanged();
                adGroupDTOs = await _adGroupRepository.GetAll(SD.SelectDictionaryScope.All);
                IsLoading = false;
                StateHasChanged();
            }
        }
        else
            _navigationManager.NavigateTo("/administration");

    }

    DataGridSettings _adGroupGridSettings;
    public DataGridSettings ADGroupGridSettings
    {
        get
        {
            return _adGroupGridSettings;
        }
        set
        {
            if (_adGroupGridSettings != value)
            {
                _adGroupGridSettings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await _jsRuntime.InvokeAsync<string>("window.localStorage.getItem", "ADGroupGridSettings");
        if (!string.IsNullOrEmpty(result))
        {
            _adGroupGridSettings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await _jsRuntime.InvokeVoidAsync("eval", $@"window.localStorage.setItem('ADGroupGridSettings', '{JsonSerializer.Serialize<DataGridSettings>(ADGroupGridSettings)}')");
    }



    async Task EditRow(ADGroupDTO adGroupDTO)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsLoading = true;

            ADGroupDTO dialogResult;

            if (adGroupDTO == null)
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<AddEditADGroup>("Создать группу AD", new Dictionary<string, object>() { { "ADGroupId", Guid.Empty } }, new DialogOptions() { Width = $"{700}px", Left = $"{300}px" });
            }
            else
            {
                IsLoading = false;
                dialogResult = await _dialogService.OpenAsync<AddEditADGroup>("Изменить группу AD", new Dictionary<string, object>() { { "ADGroupId", adGroupDTO.Id } }, new DialogOptions() { Width = $"{700}px", Left = $"{300}px" });
            }


            if (dialogResult != null)
            {
                if (adGroupDTO == null)
                {
                    IsLoading = true;
                    await LoadStateAsync();
                    StateHasChanged();
                    adGroupDTOs = await _adGroupRepository.GetAll(SD.SelectDictionaryScope.All);
                    IsLoading = false;
                    StateHasChanged();
                    IsLoading = false;
                }
                else
                {
                    adGroupDTO.Name = dialogResult.Name;
                    adGroupDTO.Description = dialogResult.Description;

                    await adGroupDTOGrid.UpdateRow(adGroupDTO);
                }
            }
        }

    }


    async Task DeleteRow(ADGroupDTO adGroupDTO)
    {

        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            if (_dialogs != null)
            {
                if (adGroupDTO.IsArchive != true)
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление группы AD", "Удалить группу AD \"" + adGroupDTO.Name
                         + ")\" в архив ?", "Удалить", "Отмена");
                    if (selectionResult == false)
                    {                        
                        return;
                    }
                }
                else
                {
                    bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Восстановление группы AD", "Восстановить группу AD \"" + adGroupDTO.Name
                        + "\" из архива ?", "Восстановить", "Отмена");
                    if (selectionResult == false)
                    {                        
                        return;
                    }
                }
            }

            if (adGroupDTO.IsArchive)
            {
                await _adGroupRepository.Update(adGroupDTO, SD.UpdateMode.RestoreFromArchive);
                adGroupDTO.IsArchive = false;
                await _jsRuntime.ToastrSuccess("Группа AD \"" + adGroupDTO.Name + ")\" восстановлена из архива");
            }
            else
            {
                await _adGroupRepository.Update(adGroupDTO, SD.UpdateMode.MoveToArchive);
                adGroupDTO.IsArchive = true;
                await _jsRuntime.ToastrSuccess("Группа AD \"" + adGroupDTO.Name + "\" удалёна в архив");
            }
            await adGroupDTOGrid.UpdateRow(adGroupDTO);
        }
    }

    async Task ExcelExport()
    {
        excelExportFlag = true;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            string userLogin = await _authorizationRepository.GetCurrentUser(SD.MessageBoxMode.Off, SD.LoginReturnMode.LoginOnly);
            string filename = "ADGroups_Export_" + userLogin.Replace("\\", "_") + "_" + DateTime.Now.ToString().Replace(":", "_") + ".xlsx";
            await _simpleExcelExportRepository.GenerateExcelADGroup(filename, (IEnumerable<ADGroupDTO>)adGroupDTOGrid.View);
            await _jsRuntime.InvokeVoidAsync("open", "DownloadFileController/SimpleExcelExport/" + filename, "_blank");
        }
        excelExportFlag = false;
        await Task.Delay(200);
        await InvokeAsync(StateHasChanged);
    }
}