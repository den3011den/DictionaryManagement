@page "/administration/Settings"
@attribute [Authorize]

@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Common;
@using DictionaryManagement_Models.IntDBModels
@using Microsoft.EntityFrameworkCore;


@inject IJSRuntime _jsRuntime
@inject ISettingsRepository _settingsRepository

@*@inject NavigationManager _navigationManager*@


<_Dialogs @ref="_dialogs"></_Dialogs>

<div class="row mt-4">

    <div class="col-6">
        <h4 class="card-title text-primary"><a href="/administration">Администрирование</a> - <a href="/administration/Settings">Настройки</a></h4>

    </div>

    @if (IsLoading != true)
    {

        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Добавить новую настройку" Click="@InsertRow" Disabled=@(settingsDTOToInsert != null || settingsDTOToUpdate != null) />
        <RadzenDataGrid @ref="settingsDTOGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" AllowMultiColumnSorting="true" EditMode="DataGridEditMode.Single"
                    Data="@settingsDTOs" TItem="SettingsDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    FilterMode="FilterMode.Simple">
            <Columns>
                <RadzenDataGridColumn TItem="SettingsDTO" Property="Id" Title="Ид записи" Width="120px" />
                <RadzenDataGridColumn TItem="SettingsDTO" Property="Name" Title="Наименование">
                    <EditTemplate Context="settingsDTO">
                        <RadzenTextBox @bind-Value="settingsDTO.Name" Style="width:100%; display: block" Name="Name" />
                        <RadzenRequiredValidator Text="Наименование обязателено к заполнению" Component="Name" Popup="true" />
                        <RadzenLengthValidator Max=100 Text="Наименование не может быть больше 100 символов" Component="Name" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="SettingsDTO" Property="Description" Title="Описание">
                    <EditTemplate Context="settingsDTO">
                        <RadzenTextBox @bind-Value="settingsDTO.Description" Style="width:100%; display: block" Name="Description" />
                        <RadzenLengthValidator Max=300 Text="Описание не может быть больше 300 символов" Component="Description" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="SettingsDTO" Property="Value" Title="Значение настройки">
                    <EditTemplate Context="settingsDTO">
                        <RadzenTextBox @bind-Value="settingsDTO.Value" Style="width:100%; display: block" Name="Value" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="SettingsDTO" Context="SettingsDTO" Filterable="true" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                    <Template Context="SettingsDTO">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(SettingsDTO))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton Tooltip="Восстановить из архива" ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(SettingsDTO))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="SettingsDTO">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(SettingsDTO))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(SettingsDTO))">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(SettingsDTO))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    }
    else
    {
        if (IsLoading)
        {
            //отображение gif загрузки
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>

        }
    }

</div>

@code {

    _Dialogs? _dialogs { get; set; }

    private int DeleteSettingsId { get; set; } = 0;
    private string DeleteSettingsName { get; set; } = "";

    RadzenDataGrid<SettingsDTO> settingsDTOGrid;

    IEnumerable<SettingsDTO> settingsDTOs;

    SettingsDTO settingsDTOToInsert;
    SettingsDTO settingsDTOToUpdate;

    bool firtsInsertRow = true;

    public bool IsLoading { get; set; }


    void Reset()
    {
        settingsDTOToInsert = null;
        settingsDTOToUpdate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            settingsDTOs = _settingsRepository.GetAll().Result;
            IsLoading = false;
            StateHasChanged();            
        }
    }

    async Task EditRow(SettingsDTO settingsDTO)
    {
        settingsDTOToUpdate = settingsDTO;
        await settingsDTOGrid.EditRow(settingsDTO);
    }

    async Task OnUpdateRow(SettingsDTO settingsDTO)
    {

        if (settingsDTO == settingsDTOToInsert)
        {
            settingsDTOToInsert = null;
        }

        settingsDTOToUpdate = null;

        var forNameCheck = _settingsRepository.GetByName(settingsDTO.Name).Result;

        if (forNameCheck != null)
        {
            if (forNameCheck.Id != settingsDTO.Id)
            {

                var objectForRestore = await _settingsRepository.Get(settingsDTO.Id);
                settingsDTO.Name = objectForRestore.Name;
                settingsDTO.Description = objectForRestore.Description;
                settingsDTO.Value = objectForRestore.Value;
                await settingsDTOGrid.UpdateRow(settingsDTO);
                await settingsDTOGrid.Reload();

                await settingsDTOGrid.UpdateRow(settingsDTO);

                await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Уже есть настройка с наименованием \"" + forNameCheck.Name + "\" (ИД записи: " + forNameCheck.Id.ToString() + ")");

                return;
            }
        }
        await _settingsRepository.Update(settingsDTO);
    }

    async Task SaveRow(SettingsDTO settingsDTO)
    {
        await settingsDTOGrid.UpdateRow(settingsDTO);
    }

    void CancelEdit(SettingsDTO settingsDTO)
    {
        if (settingsDTO == settingsDTOToInsert)
        {
            settingsDTOToInsert = null;
        }

        settingsDTOToUpdate = null;

        settingsDTOGrid.CancelEditRow(settingsDTO);

        var objectForRestore = _settingsRepository.Get(settingsDTO.Id).GetAwaiter().GetResult();        
        settingsDTO.Name = objectForRestore.Name;
        settingsDTO.Value = objectForRestore.Value;
        settingsDTO.Description = objectForRestore.Description;
        settingsDTOGrid.UpdateRow(settingsDTO);
        settingsDTOGrid.Reload();

    }

    async Task DeleteRow(SettingsDTO settingsDTO)
    {

        if (_dialogs != null)
        {
            bool selectionResult = await _dialogs.ShowYesOrNoDialogBox("Удаление настройки", "Удалить настройку \"" + settingsDTO.Name + "\" безвозвратно ?", "Удалить", "Отмена");
            if (selectionResult == false)
            {
                await _jsRuntime.ToastrSuccess("Отмена удаления");
                return;
            }
        }

        if (settingsDTO == settingsDTOToInsert)
        {
            settingsDTOToInsert = null;
        }

        if (settingsDTO == settingsDTOToUpdate)
        {
            settingsDTOToUpdate = null;
        }

        if (settingsDTOs.Contains(settingsDTO))
        {
            await _settingsRepository.Delete(settingsDTO.Id);

            settingsDTOs = settingsDTOs.Where(u => u.Id != settingsDTO.Id);

            await settingsDTOGrid.Reload();
        }
        else
        {
            settingsDTOGrid.CancelEditRow(settingsDTO);
            await settingsDTOGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        if (firtsInsertRow)
        {
            firtsInsertRow = false;
            await _jsRuntime.InvokeVoidAsync("ShowSwal", "warning", "Добавление новой записи в справочник настроек не приведёт к использованию этой настройки приложением без внесения изменений в код приложения!");
        }
        settingsDTOToInsert = new SettingsDTO();
        await settingsDTOGrid.InsertRow(settingsDTOToInsert);
    }
        
    async Task OnCreateRow(SettingsDTO settingsDTO)
    {
        settingsDTOToInsert = null;

        string errorMessage = string.Empty;
        var objectForCheckName = _settingsRepository.GetByName(settingsDTO.Name).Result;

        if (objectForCheckName != null)
        {
            await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Уже есть запись настройки с наименованием \"" + objectForCheckName.Name + "\" (ИД записи: " + objectForCheckName.Id.ToString() + ")");
            settingsDTOGrid.CancelEditRow(settingsDTO);
            await settingsDTOGrid.Reload();
            return;
        }

        var newDTO = await _settingsRepository.Create(settingsDTO);
        await OnAfterRenderAsync(true);

    }


}


