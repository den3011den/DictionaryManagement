@page "/administration/User/AddEditUser/{UserId}"
@attribute [Authorize]


@using DictionaryManagement_Business.Repository.IRepository;
@using DictionaryManagement_Models.IntDBModels

@inject IJSRuntime _jsRuntime

@inject IUserRepository _userRepository
@inject DialogService _dialogService

@if (IsAdmin == true)
{
    <div class="row my-2">        

        <div class="col-md-10">
            @if (IsLoading)
            {
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>
            }
            else
            {
                <EditForm Model="ActiveUserDTO" OnValidSubmit="AddEditUserProcedure">
                    <DataAnnotationsValidator />

                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="12">
                            <RadzenStack>

                                @if (UserId != Guid.Empty)
                                {
                                    <RadzenFormField Text="ИД" Variant="@variant" Style="width: 100%; max-width: 600px;">
                                        <RadzenNumeric @bind-Value="@ActiveUserDTO.Id" ReadOnly="true" />
                                    </RadzenFormField>
                                }

                                <RadzenFormField Text="Логин" Variant="@variant" Style="width: 100%; max-width: 600px;">
                                    <RadzenTextBox @bind-Value="@ActiveUserDTO.Login" />
                                </RadzenFormField>
                                <ValidationMessage For="()=>ActiveUserDTO.Login"></ValidationMessage>


                                <RadzenFormField Text="Логин" Variant="@variant" Style="width: 100%; max-width: 600px;">
                                    <RadzenTextBox @bind-Value="@ActiveUserDTO.UserName" />
                                </RadzenFormField>
                                <ValidationMessage For="()=>ActiveUserDTO.UserName"></ValidationMessage>

                                <RadzenFormField Text="Описание" Variant="@variant" Style="width: 100%; max-width: 600px;">
                                    <RadzenTextBox @bind-Value="@ActiveUserDTO.Description" />
                                </RadzenFormField>
                                <ValidationMessage For="()=>ActiveUserDTO.Description"></ValidationMessage>

                                <RadzenLabel Text="Синхронизировать группы AD:" Component="CheckBox4" Style="margin-left: 8px; margin-top: 8px;" />
                                <RadzenSelectBar @bind-Value="@ActiveUserDTO.IsSyncWithAD" TValue="bool" class="mb-4" Name="CheckBox4">
                                    <Items>
                                        <RadzenSelectBarItem Text="Да" Value="true" />
                                        <RadzenSelectBarItem Text="Нет" Value="false" />
                                    </Items>
                                </RadzenSelectBar>

                                <RadzenLabel Text="Время поледней синх-ции с группами AD:"Style="margin-left: 8px; margin-top: 8px;" />
                                <RadzenDatePicker @bind-Value=@ActiveUserDTO.SyncWithADGroupsLastTime ShowTime="true" HourFormat="24" DateFormat="dd.MM.yyyy hh:mm tt" />

                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                    
                    <div class="form-group py-2">
                        <button class="btn btn-primary">@Title</button>
                        <NavLink @onclick="(() => OnClickCancel())" class="btn btn-secondary">Отмена</NavLink>
                    </div>
                </EditForm>
            }
        </div>
    </div>
}




@code {

    [Parameter]
    public Guid UserId { get; set; }


    Variant variant = Variant.Outlined;

    public bool IsLoading { get; set; }
    public bool IsAdmin { get; set; }

    public UserDTO ActiveUserDTO { get; set; }

    IEnumerable<UserDTO> UserDTOList { get; set; } = new List<UserDTO>();

    public IEnumerable<object> CheckedValues { get; set; } = new List<object>();

    private string Title { get; set; } = "Создать пзользователя";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        IsLoading = true;
        StateHasChanged();

        if (UserId == Guid.Empty)
        {
            ActiveUserDTO = new UserDTO();
        }
        else
        {
            ActiveUserDTO = await _userRepository.Get(UserId);
            Title = "Изменить пользователя";
        }

        IsLoading = false;
        StateHasChanged();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            IsAdmin = true;
            if (firstRender)
            {

                IsLoading = true;
                StateHasChanged();

                if (UserId == Guid.Empty)
                {
                    ActiveUserDTO = new UserDTO();
                }
                else
                {
                    ActiveUserDTO = await _userRepository.Get(UserId);
                    Title = "Изменить пользователя";
                }
                UserDTOList = await _userRepository.GetAll(SD.SelectDictionaryScope.All);

                IsLoading = false;
                StateHasChanged();
            }
        }
        else
            _navigationManager.NavigateTo("/administration/User");
    }

    private async Task AddEditUserProcedure()
    {
        if (await _authorizationRepository.CurrentUserIsInAdminRole(SD.MessageBoxMode.On))
        {
            if (UserId == Guid.Empty)
            { // создание
                var foundByUserName = await _userRepository.GetByUserName(ActiveUserDTO.UserName);
                if (foundByUserName != null)
                {
                    await _jsRuntime.ToastrError("Уже есть пользователь с наименованием " + foundByUserName.UserName + " (ИД: " + foundByUserName.Id.ToString() + ")");
                    return;                    
                }

                var foundByLogin = await _userRepository.GetByLogin(ActiveUserDTO.Login);
                if (foundByLogin != null)
                {
                    await _jsRuntime.ToastrError("Уже есть пользователь с логином " + foundByLogin.Login + " (ИД: " + foundByLogin.Id.ToString() + ")");
                    return;
                }

                if (ActiveUserDTO.SyncWithADGroupsLastTime == null)
                    ActiveUserDTO.SyncWithADGroupsLastTime = DateTime.MinValue;

                await _userRepository.Create(ActiveUserDTO);

                await _jsRuntime.ToastrSuccess("Пользователь \"" + ActiveUserDTO.UserName + " (" + ActiveUserDTO.Login +")\" создан");
         
                _dialogService.Close(ActiveUserDTO);

            }
            else
            { // изменение пользователя

                var foundByUserName = await _userRepository.GetByUserName(ActiveUserDTO.UserName);
                if ((foundByUserName != null) && (foundByUserName.Id != ActiveUserDTO.Id))
                {
                    await _jsRuntime.ToastrError("Уже есть пользователь с ФИО " + foundByUserName.UserName + " (ИД: " + foundByUserName.Id.ToString() + ")");
                    return;
                }

                var foundByLogin = await _userRepository.GetByLogin(ActiveUserDTO.Login);
                if ((foundByLogin != null) && (foundByLogin.Id != ActiveUserDTO.Id))
                {
                    await _jsRuntime.ToastrError("Уже есть пользователь с логином " + foundByLogin.Login + " (ИД: " + foundByLogin.Id.ToString() + ")");
                    return;

                }

                await _userRepository.Update(ActiveUserDTO);

                await _jsRuntime.ToastrSuccess("Пользователь \"" + ActiveUserDTO.UserName + " (" + ActiveUserDTO.Login + ") \" изменен");
                
                _dialogService.Close(ActiveUserDTO);
            }
        }

    }

    private async Task OnClickCancel() => _dialogService.Close(null);


}
